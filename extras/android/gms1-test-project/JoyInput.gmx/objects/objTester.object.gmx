<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>fontMicro = font_add_sprite_ext(sprFontMicro, " !"+'"'+"#$%&amp;'()*+,-./0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~ € ‚ƒ„…†‡ˆ‰Š‹Œ Ž  ‘’“”•–—˜™š›œ žŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿЂЃ‚ѓ„…†‡€‰Љ‹ЊЌЋЏђ‘’“”•–— ™љ›њќћџ ЎўЈ¤Ґ¦§Ё©Є«¬­®Ї°±Ііґµ¶·ё№є»јЅѕїАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя", 0,0);
state = 0;
subState = 0;
inputState = 0;
prevInputState = -1;
prevReadState = -1;
mappedKey = 0;
textRows = false;
doubleDeviceMode = false;
doubleDeviceModeIsDetecting = false;
deviceLabel = "";
vibrating = false;
for(var i = 0; i &lt; 36; i++)
{
    textRows[i] = "";
}
sttandroid_mode_set(1);
// sttandroid_gamepad_swmap_set(inputNumber, inputCode, keyCode)
sttandroid_gamepad_swmap_set(0, cUP, 12);
sttandroid_gamepad_swmap_set(0, cDOWN, 11);
sttandroid_gamepad_swmap_set(0, cLEFT, 2);
sttandroid_gamepad_swmap_set(0, cRIGHT, 1);
sttandroid_gamepad_swmap_set(0, cUP, 162);
sttandroid_gamepad_swmap_set(0, cDOWN, 161);
sttandroid_gamepad_swmap_set(0, cLEFT, 152);
sttandroid_gamepad_swmap_set(0, cRIGHT, 151);
sttandroid_gamepad_swmap_set(0, cA, 990);
sttandroid_gamepad_swmap_set(0, cB, 960);
sttandroid_gamepad_swmap_set(0, cC, 970);
sttandroid_gamepad_swmap_set(0, cSTART, 1080);

add_console_output("Key mappings:");
add_console_output("UP: "+string(android_get_formatted_mapped_descriptor(0, cUP)));
add_console_output("DOWN: "+string(android_get_formatted_mapped_descriptor(0, cDOWN)));
add_console_output("LEFT: "+string(android_get_formatted_mapped_descriptor(0, cLEFT)));
add_console_output("RIGHT: "+string(android_get_formatted_mapped_descriptor(0, cRIGHT)));
add_console_output("A: "+string(android_get_formatted_mapped_descriptor(0, cA)));
add_console_output("B: "+string(android_get_formatted_mapped_descriptor(0, cB)));
add_console_output("C: "+string(android_get_formatted_mapped_descriptor(0, cC)));
add_console_output("START: "+string(android_get_formatted_mapped_descriptor(0, cSTART)));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>inputState = sttandroid_gamepad_get_state(0);
if(inputState == -1)
{
    android_set_hardware_mapping(0);
}
if(inputState &gt;= 0)
{
    var detectedDeviceLabel = sttandroid_gamepad_get_label(0, -1);
    if(detectedDeviceLabel != deviceLabel)
    {
        deviceLabel = detectedDeviceLabel;
        add_console_output("Device: "+string(detectedDeviceLabel));
        var vendorData = string_explode('||', string(sttandroid_gamepad_get_descriptor(0)));
        if(array_length_1d(vendorData) == 4)
        {
            add_console_output(" - vendor:  "+vendorData[0]);
            add_console_output(" - product: "+vendorData[1]);
            add_console_output(" - other vendor:  "+vendorData[2]);
            add_console_output(" - other product: "+vendorData[3]);
        }
    }
}
if(inputState != prevInputState)
{
    if(inputState == -2)
    {
        add_console_output("State: "+string(inputState)+" (no device)");    
    }
    else
    {
        if(inputState == -1)
        {
            add_console_output("State: "+string(inputState)+" (device lacks hardware mapping)");
        }
        else
        {
            add_console_output("State: "+string(inputState));
        }
    }
    prevInputState = inputState;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(state == 2)
{
    var readState = sttandroid_gamepad_anykey_get_value(0);
    if(prevReadState != readState)
    {
        add_console_output("Read: "+string(readState));

        if(readState &gt;= 0)
        {
            if(sttandroid_gamepad_swmap_set(0, mappedKey, readState))
            {
                add_console_output(android_get_formatted_mapped_descriptor(0, mappedKey));
                switch(mappedKey)
                {
                    case 1:
                        add_console_output("Press DOWN");
                        mappedKey = 2;
                        break;
                    case 2:
                        add_console_output("Press LEFT");
                        mappedKey = 4;
                        break;
                    case 4:
                        add_console_output("Press RIGHT");
                        mappedKey = 8;
                        break;
                    case 8:
                        add_console_output("Press A");
                        mappedKey = 16;
                        break;
                    case 16:
                        add_console_output("Press B");
                        mappedKey = 32;
                        break;
                    case 32:
                        add_console_output("Press C");
                        mappedKey = 64;
                        break;
                    case 64:
                        add_console_output("Press START");
                        mappedKey = 128;
                        break;
                    case 128:
                        add_console_output("Done");
                        sttandroid_gamepad_anykey_set_mode(0, false);
                        mappedKey = 0;
                        state = 0;
                        break;
                }
            }
            else
            {
                add_console_output("Can't map this");
            }
        }
            prevReadState = readState;
    }
}
else
if(state == 3)
{
    var prevSubState = subState;
    subState = sttandroid_gamepad_doubledetect_get_detect_state();
    if(prevSubState != subState)
    {
        switch(subState)
        {
            case 1:
                add_console_output("Press a button on device 1");
                break;
            case 2:
                add_console_output("Press a button on device 2");
                break;
            default:
                add_console_output("Exiting");
                state = 0;
                subState = 0;
                inputState = 0;
        }
        
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(state)
{
    case 0:
        state = 1;
        break;    
    case 1:
        if(mouse_y &lt; 100)
        {
            add_console_output("Mapping inputs");
            add_console_output("Press UP");
            sttandroid_gamepad_anykey_set_mode(0, true);
            state = 2;
            mappedKey = 1;
        }
        else
        if(mouse_y &lt; 200)
        {
            add_console_output("Device detection mode ON");
            sttandroid_gamepad_doubledetect_start(0);
            state = 3;
            subState = 0;
            
        }
        else
        if(mouse_y &lt; 300)
        {
            if(vibrating)
            {
                add_console_output("Vibration stopped");    
                sttandroid_rumble_perform(0, 0);
            }
            else
            {
                add_console_output("Vibration started");            
                sttandroid_rumble_perform(0, 1);
            }
            vibrating = !vibrating;
            state = 0;
            subState = 0;
            
        }
        break;    
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(fontMicro);

if(state == 1)
{
    draw_rectangle_colour(1, 1, 238, 99, c_white, c_white, c_white, c_white, true);
    draw_rectangle_colour(1, 101, 238, 199, c_white, c_white, c_white, c_white, true);
    draw_rectangle_colour(1, 201, 238, 299, c_white, c_white, c_white, c_white, true);
    
    draw_set_halign(fa_middle);
    draw_set_valign(fa_center);
    
    draw_text(120, 50, "Remap keys");
    if(doubleDeviceMode)
    {
        draw_text(120, 150, "Double device mode: ON");
    }
    else
    {
        draw_text(120, 150, "Double device mode: OFF");
    }
    if(vibrating)
    {
        draw_text(120, 250, "Stop vibrating");
    }
    else
    {
        draw_text(120, 250, "Vibrate");
    }
    
}
else
{
    draw_gp_button(64, 4, "^", cUP);
    draw_gp_button(64, 20, "v", cDOWN);
    draw_gp_button(40, 12, "&lt;", cLEFT);
    draw_gp_button(88, 12, "&gt;", cRIGHT);
    
    draw_gp_button(120, 12, "S", cSTART);
    
    draw_gp_button(152, 12, "A", cA);
    draw_gp_button(176, 12, "B", cB);
    draw_gp_button(200, 12, "C", cC);

    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    for(var i = 0; i &lt; 36; i++)
    {
        draw_text(8, 41+ 10*i, textRows[i]);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(state == 2)
{
    sttandroid_gamepad_anykey_set_mode(0, false);
}
if(state == 3)
{
    sttandroid_gamepad_doubledetect_cancel();
}
state = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
