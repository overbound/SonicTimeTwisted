<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>objAndroidInput</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
vk_active = false;
alpha = 0;
gyroscopeMode = false;
gyroscopeModeDraw = false; // whether to draw UP button instead of the D-Pad
ggCurrentMode = 0; // galacnik gauntlet mode
gyroscopeTilt = 0;
// load android-specific settings
var file = 'settings.ini';
input = 1; // 0 - touchscreen, 1 - no touchscreen
dpadMode = 0; // 0 - static, 1 - dynamic
vkalpha = 0.8;
gyroinss = 1; // use gyroscope controls in special stages
gg_mode = 1; // controls in Galacnik Gauntlet - 0 - dpad, 1 - gyroscope, 2 - point on screen
vksize = 0; // 0 - big controls, 1 - medium controls, 2 - small controls
gyromode = 1; // 0 - gyroscope simply turns the buttons no and off; 1 - pseudo-analog mode
gyro_switch_on_angle_x = 0.15; // angle on which the button is pressed
gyro_analog_start_x = 0.2; // angle from which the analog control starts
gyro_analog_end_x = 0.6; // angle to which the analog control goes
gyro_switch_on_angle_y = 0.15; // angle on which the button is pressed
gyro_analog_start_y = 0.2; // angle from which the analog control starts
gyro_analog_end_y = 0.6; // angle to which the analog control goes
gyro_origin_y = 0; // angle at which the Y axis is considered to be idle (if it's managed)
gyro_origin_is_set = false; // whether the Y axis idle state is being set
dpadx = 64;
dpady = 178;
bax = 364;
bay = 178;
bar = 32;
bsx = 200;
bsy = 16;
bbx = 324;
bby = 88;

if (eas_file_exists(file)) {
    eas_ini_open(file);
    dpadMode = ini_read_real('smartphone','dpadmode',0);
    input = ini_read_real('smartphone','input',0);
    vkalpha = ini_read_real('smartphone','vkalpha',0.8);
    gyroinss = ini_read_real('smartphone','gyroinss',1);
    vksize = ini_read_real('smartphone','vksize',0);
    dpadx = ini_read_real('smartphone','dpadx',64);
    dpady = ini_read_real('smartphone','dpady',178);
    bax = ini_read_real('smartphone','bax',364);
    bay = ini_read_real('smartphone','bay',178);
    bsx = ini_read_real('smartphone','bsx',200);
    bsy = ini_read_real('smartphone','bsy',16);
    bbx = ini_read_real('smartphone','bbx',324);
    bby = ini_read_real('smartphone','bby',88);
    gyromode = ini_read_real('smartphone','gyromode',1);
    gyro_switch_on_angle_x = ini_read_real('smartphone','gyro_switch_on_angle_x',0.15);
    gyro_analog_start_x = ini_read_real('smartphone','gyro_analog_start_x',0.1);
    gyro_analog_end_x = ini_read_real('smartphone','gyro_analog_end_x',0.6);
    gyro_switch_on_angle_y = ini_read_real('smartphone','gyro_switch_on_angle_y',0.15);
    gyro_analog_start_y = ini_read_real('smartphone','gyro_analog_start_y',0.1);
    gyro_analog_end_y = ini_read_real('smartphone','gyro_analog_end_y',0.6);
    gg_mode = ini_read_real('smartphone','gg_mode',1);
    eas_ini_close();
}

vKeyJoy_surface = surface_create(64, 64);
dpad_sectors = false; // initialize triangles matching directions on touchscreen here
prev_dpad_pressed = 5; // previously pressed direction
dpad_pressed = 5; // currently pressed direction
jump_pressed = false; 
super_pressed = false;
start_pressed = false;
up_pressed = false;
superIsEnabled = false;
/*
in "pseudo-analog" mode, this timer will be used to know when to simulate a tap on a button
*/
gyro_analog_timer = 0;
// variables used for dynamic gamepad : the D-pad appears wherever you put your finger
dynamic_state = 0;
dynamic_device = 0;
dynamic_startx = 0;
dynamic_starty = 0;
keys = ds_map_create();
ds_map_add(keys, cUP, false);
ds_map_add(keys, cDOWN, false);
ds_map_add(keys, cLEFT, false);
ds_map_add(keys, cRIGHT, false);
ds_map_add(keys, cA, false);
ds_map_add(keys, cB, false);
ds_map_add(keys, cC, false);
ds_map_add(keys, cSTART, false);
notice = '';
notice_timer = 0;
// map allowing to track key presses
keyboard_pressed = ds_map_create();
keyboard_holding = ds_map_create();
for(var i = 0; i &lt; 255; i++)
{
    ds_map_replace(keyboard_pressed, i, false);
    ds_map_replace(keyboard_holding, i, false);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_map_destroy(keys);
ds_map_destroy(keyboard_pressed);
ds_map_destroy(keyboard_holding);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(objProgram.inputManager.input)
{
    event_inherited();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Sorry for the copy-paste, it's for performances' sake</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// make the virtual keys appear or disappear by fading
// also, synchronize touchscreen status with availability to control the character
if(input == 0)
{
    state = 0;
    state_press = 0;
    state_release = 0;
    
    var vk_should_be_active = vk_active;
    if(!objScreen.paused)
    {
        if(instance_exists(objLevel))
        {
            if(objLevel.player[0] != noone)
            {
                vk_should_be_active =
                    (objLevel.player[0].state != player_state_complete
                    &amp;&amp; objLevel.player[0].state != player_state_standby
                    &amp;&amp; objLevel.player[0].state != player_state_fall_automatically)
                    &amp;&amp; objProgram.inputManager.flag_player_input;
            }
        }
        else
        if(instance_exists(objSSLevel_Android))
        {
            vk_should_be_active = objSSLevel_Android.started &amp;&amp; (!objSSLevel_Android.failed) &amp;&amp; (!objSSLevel_Android.cleared);
        }
    }
    
    if(vk_active)
    {
        // Let's see if touchscreen needs to be disabled
        if(!vk_should_be_active)
        {
            smartphone_disable_virtual_keys();
        }
        else
        {
            if(alpha &lt; vkalpha)
            {
                alpha += 0.05;
                if(alpha &gt; vkalpha)
                {
                    alpha = vkalpha;
                }
            }
            
            // in Galacnik Gauntlet, check whether touchscreen controls are enabled
            if(objProgram.current_level == 16)
            {
                ggCurrentMode = gg_mode;
            }
            else
            {
                ggCurrentMode = 0;
            }
            android_manage_touchscreen_controls();
            if(gyroscopeMode)
            {
                android_manage_gyroscope_controls(false);
            }
            else
            {
                switch(ggCurrentMode)
                {
                    case 0:
                        // nothing special here
                        break;
                    case 1:
                        // GG gyroscope controls
                        android_manage_gyroscope_controls(true);
                        break;
                    case 2:
                        // GG point controls
                        android_manage_touch_controls();
                        break;
                }
            }
            
    
            
            // apply pressed keys
            var size = ds_map_size(keys) ;
            var key = ds_map_find_first(keys);
            for (var i = 0; i &lt; size; i++;)
            {
               if(ds_map_find_value(keys, key))
               {
                   state |= key;
               }
               key = ds_map_find_next(keys, key);
            }
        }
    }
    if(!vk_active)
    {
        if(vk_should_be_active)
        {
            if(instance_exists(objPlayer))
            {
                smartphone_enable_virtual_keys(false);
            }
            else
            if(instance_exists(objSSPlayer))
            {
                smartphone_enable_virtual_keys(true);
            }
        }
        else
        {
            if(alpha &gt; 0)
            {
                alpha -= 0.01;
                if(alpha &lt; 0)
                {
                    alpha = 0;
                }
            }
        }
    }
}
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Event to trigger when touch controls are disabled</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Disable virtual controls
vk_active = false;
gyroscopeMode = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Event to trigger when touch controls are enabled</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize virtual controls.
// Must be called on every room, but also on other special occasions
// Because of this, it is now a user event
// 0 and 5 aren't technically buttons, but they're still there so that the array can function
dpad_sectors[0,0] = 0;
switch(vksize)
{
    case 0:
        dpad_sectors[1,0] = dpadx - 32;
        dpad_sectors[1,1] = dpady - 48;
        dpad_sectors[1,2] = dpadx - 48;
        dpad_sectors[1,3] = dpady - 32;
        
        dpad_sectors[2,0] = dpadx - 32;
        dpad_sectors[2,1] = dpady - 48;
        dpad_sectors[2,2] = dpadx + 32;
        dpad_sectors[2,3] = dpady - 48;
        
        dpad_sectors[3,0] = dpadx + 32;
        dpad_sectors[3,1] = dpady - 48;
        dpad_sectors[3,2] = dpadx + 48;
        dpad_sectors[3,3] = dpady - 32;
        
        dpad_sectors[4,0] = dpadx - 48;
        dpad_sectors[4,1] = dpady - 32;
        dpad_sectors[4,2] = dpadx - 48;
        dpad_sectors[4,3] = dpady + 32;
        
        dpad_sectors[5,0] = 0;
        
        dpad_sectors[6,0] = dpadx + 48;
        dpad_sectors[6,1] = dpady - 32;
        dpad_sectors[6,2] = dpadx + 48;
        dpad_sectors[6,3] = dpady + 32;
        
        dpad_sectors[7,0] = dpadx - 48;
        dpad_sectors[7,1] = dpady + 32;
        dpad_sectors[7,2] = dpadx - 32;
        dpad_sectors[7,3] = dpady + 48;
        
        dpad_sectors[8,0] = dpadx - 32;
        dpad_sectors[8,1] = dpady + 48;
        dpad_sectors[8,2] = dpadx + 32;
        dpad_sectors[8,3] = dpady + 48;
        
        dpad_sectors[9,0] = dpadx + 32;
        dpad_sectors[9,1] = dpady + 48;
        dpad_sectors[9,2] = dpadx + 48;
        dpad_sectors[9,3] = dpady + 32;
    break;
    case 1:
        dpad_sectors[1,0] = dpadx - 24;
        dpad_sectors[1,1] = dpady - 36;
        dpad_sectors[1,2] = dpadx - 36;
        dpad_sectors[1,3] = dpady - 24;
        
        dpad_sectors[2,0] = dpadx - 24;
        dpad_sectors[2,1] = dpady - 36;
        dpad_sectors[2,2] = dpadx + 24;
        dpad_sectors[2,3] = dpady - 36;
        
        dpad_sectors[3,0] = dpadx + 24;
        dpad_sectors[3,1] = dpady - 36;
        dpad_sectors[3,2] = dpadx + 36;
        dpad_sectors[3,3] = dpady - 24;
        
        dpad_sectors[4,0] = dpadx - 36;
        dpad_sectors[4,1] = dpady - 24;
        dpad_sectors[4,2] = dpadx - 36;
        dpad_sectors[4,3] = dpady + 24;
        
        dpad_sectors[5,0] = 0;
        
        dpad_sectors[6,0] = dpadx + 36;
        dpad_sectors[6,1] = dpady - 24;
        dpad_sectors[6,2] = dpadx + 36;
        dpad_sectors[6,3] = dpady + 24;
        
        dpad_sectors[7,0] = dpadx - 36;
        dpad_sectors[7,1] = dpady + 24;
        dpad_sectors[7,2] = dpadx - 24;
        dpad_sectors[7,3] = dpady + 36;
        
        dpad_sectors[8,0] = dpadx - 24;
        dpad_sectors[8,1] = dpady + 36;
        dpad_sectors[8,2] = dpadx + 24;
        dpad_sectors[8,3] = dpady + 36;
        
        dpad_sectors[9,0] = dpadx + 24;
        dpad_sectors[9,1] = dpady + 36;
        dpad_sectors[9,2] = dpadx + 36;
        dpad_sectors[9,3] = dpady + 24;
    break;
    case 2:
        dpad_sectors[1,0] = dpadx - 16;
        dpad_sectors[1,1] = dpady - 24;
        dpad_sectors[1,2] = dpadx - 24;
        dpad_sectors[1,3] = dpady - 16;
        
        dpad_sectors[2,0] = dpadx - 16;
        dpad_sectors[2,1] = dpady - 24;
        dpad_sectors[2,2] = dpadx + 16;
        dpad_sectors[2,3] = dpady - 24;
        
        dpad_sectors[3,0] = dpadx + 16;
        dpad_sectors[3,1] = dpady - 24;
        dpad_sectors[3,2] = dpadx + 24;
        dpad_sectors[3,3] = dpady - 16;
        
        dpad_sectors[4,0] = dpadx - 24;
        dpad_sectors[4,1] = dpady - 16;
        dpad_sectors[4,2] = dpadx - 24;
        dpad_sectors[4,3] = dpady + 16;
        
        dpad_sectors[5,0] = 0;
        
        dpad_sectors[6,0] = dpadx + 24;
        dpad_sectors[6,1] = dpady - 16;
        dpad_sectors[6,2] = dpadx + 24;
        dpad_sectors[6,3] = dpady + 16;
        
        dpad_sectors[7,0] = dpadx - 24;
        dpad_sectors[7,1] = dpady + 16;
        dpad_sectors[7,2] = dpadx - 16;
        dpad_sectors[7,3] = dpady + 24;
        
        dpad_sectors[8,0] = dpadx - 16;
        dpad_sectors[8,1] = dpady + 24;
        dpad_sectors[8,2] = dpadx + 16;
        dpad_sectors[8,3] = dpady + 24;
        
        dpad_sectors[9,0] = dpadx + 16;
        dpad_sectors[9,1] = dpady + 24;
        dpad_sectors[9,2] = dpadx + 24;
        dpad_sectors[9,3] = dpady + 16;
    break;
}
vk_active = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>smartphone_disable_virtual_keys();
alpha = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>objAndroidInput</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(alpha &gt; 0)
{
    if(gyroscopeModeDraw)
    {
        if(vksize == 0)
        {
            if(android_vk_is_pressed(cUP))
            {
                draw_sprite_ext(sprTouchscreenRunButton, 1, dpadx - 32, dpady - 32, 1, 1, 0, c_white, alpha);
            }
            else
            {
                draw_sprite_ext(sprTouchscreenRunButton, 0, dpadx - 32, dpady - 32, 1, 1, 0, c_white, alpha);
            }
            if(android_vk_is_pressed(cC))
            {
                draw_sprite_ext(sprTouchscreenButton, 1, bax - 32, bay - 32, 1, 1, 0, c_white, alpha);
            }
            else
            {
                draw_sprite_ext(sprTouchscreenButton, 0, bax - 32, bay - 32, 1, 1, 0, c_white, alpha);
            }
        }
        else
        if(vksize == 1)
        {
            if(android_vk_is_pressed(cUP))
            {
                draw_sprite_ext(sprTouchscreenRunButtonMed, 1, dpadx - 24, dpady - 24, 1, 1, 0, c_white, alpha);
            }
            else
            {
                draw_sprite_ext(sprTouchscreenRunButtonMed, 0, dpadx - 24, dpady - 24, 1, 1, 0, c_white, alpha);
            }
            if(android_vk_is_pressed(cC))
            {
                draw_sprite_ext(sprTouchscreenButtonMed, 1, bax - 24, bay - 24, 1, 1, 0, c_white, alpha);
            }
            else
            {
                draw_sprite_ext(sprTouchscreenButtonMed, 0, bax - 24, bay - 24, 1, 1, 0, c_white, alpha);
            }
        }
        else
        if(vksize == 2)
        {
            if(android_vk_is_pressed(cUP))
            {
                draw_sprite_ext(sprTouchscreenRunButtonSmall, 1, dpadx - 16, dpady - 16, 1, 1, 0, c_white, alpha);
            }
            else
            {
                draw_sprite_ext(sprTouchscreenRunButtonSmall, 0, dpadx - 16, dpady - 16, 1, 1, 0, c_white, alpha);
            }
            if(android_vk_is_pressed(cC))
            {
                draw_sprite_ext(sprTouchscreenButtonSmall, 1, bax - 16, bay - 16, 1, 1, 0, c_white, alpha);
            }
            else
            {
                draw_sprite_ext(sprTouchscreenButtonSmall, 0, bax - 16, bay - 16, 1, 1, 0, c_white, alpha);
            }
        }
    }
    else
    switch(ggCurrentMode)
    {
        case 0:
            var usedDpadX = dpadx;
            var usedDpadY = dpady;
            var drawDPad = (!dpadMode) || dynamic_state;
            if(dpadMode == 1)
            {
                usedDpadX = dynamic_startx;
                usedDpadY = dynamic_starty;
            }
            
            if(!surface_exists(vKeyJoy_surface))
            {
                vKeyJoy_surface = surface_create(64, 64);
            }
            if(vksize == 0)
            {
                if(drawDPad)
                {
                    surface_set_target(vKeyJoy_surface);
                    draw_clear_alpha(c_black, 0);
                    draw_sprite(sprTouchscreenDPadBase, 0, 0, 0);
                    if(android_vk_is_pressed(cUP))
                    {
                        if(android_vk_is_pressed(cRIGHT))
                        {
                            draw_sprite(sprTouchscreenDPadJoy, 0, 24, 8);
                        }
                        else
                        if(android_vk_is_pressed(cLEFT))
                        {
                            draw_sprite(sprTouchscreenDPadJoy, 0, 8, 8);
                        }
                        else
                        {
                            draw_sprite(sprTouchscreenDPadJoy, 0, 16, 0);
                        }
                    }
                    else
                    {
                        if(android_vk_is_pressed(cDOWN))
                        {
                            if(android_vk_is_pressed(cRIGHT))
                            {
                                draw_sprite(sprTouchscreenDPadJoy, 0, 24, 24);
                            }
                            else
                            if(android_vk_is_pressed(cLEFT))
                            {
                                draw_sprite(sprTouchscreenDPadJoy, 0, 8, 24);
                            }
                            else
                            {
                                draw_sprite(sprTouchscreenDPadJoy, 0, 16, 32);
                            }
                        }
                        else
                        {
                            if(android_vk_is_pressed(cRIGHT))
                            {
                                draw_sprite(sprTouchscreenDPadJoy, 0, 32, 16);
                            }
                            else
                            if(android_vk_is_pressed(cLEFT))
                            {
                                draw_sprite(sprTouchscreenDPadJoy, 0, 0, 16);
                            }
                            else
                            {
                                draw_sprite(sprTouchscreenDPadJoy, 0, 16, 16);
                            }
                        }
                    }
                    surface_reset_target();
                    
                    draw_surface_ext(vKeyJoy_surface, usedDpadX - 32, usedDpadY - 32, 1, 1, 0, c_white, alpha);
                    
                }
                if(android_vk_is_pressed(cC))
                {
                    draw_sprite_ext(sprTouchscreenButton, 1, bax - 32, bay - 32, 1, 1, 0, c_white, alpha);
                }
                else
                {
                    draw_sprite_ext(sprTouchscreenButton, 0, bax - 32, bay - 32, 1, 1, 0, c_white, alpha);
                }
            }
            else
            if(vksize == 1)
            {
                if(drawDPad)
                {
                    surface_set_target(vKeyJoy_surface);
                    draw_clear_alpha(c_black, 0);
                    draw_sprite(sprTouchscreenDPadBaseMed, 0, 0, 0);
                    
                    if(android_vk_is_pressed(cUP))
                    {
                        if(android_vk_is_pressed(cRIGHT))
                        {
                            draw_sprite(sprTouchscreenDPadJoyMed, 0, 20, 4);
                        }
                        else
                        if(android_vk_is_pressed(cLEFT))
                        {
                            draw_sprite(sprTouchscreenDPadJoyMed, 0, 4, 4);
                        }
                        else
                        {
                            draw_sprite(sprTouchscreenDPadJoyMed, 0, 12, 0);
                        }
                    }
                    else
                    {
                        if(android_vk_is_pressed(cDOWN))
                        {
                            if(android_vk_is_pressed(cRIGHT))
                            {
                                draw_sprite(sprTouchscreenDPadJoyMed, 0, 20, 20);
                            }
                            else
                            if(android_vk_is_pressed(cLEFT))
                            {
                                draw_sprite(sprTouchscreenDPadJoyMed, 0, 4, 20);
                            }
                            else
                            {
                                draw_sprite(sprTouchscreenDPadJoyMed, 0, 12, 24);
                            }
                        }
                        else
                        {
                            if(android_vk_is_pressed(cRIGHT))
                            {
                                draw_sprite(sprTouchscreenDPadJoyMed, 0, 24, 12);
                            }
                            else
                            if(android_vk_is_pressed(cLEFT))
                            {
                                draw_sprite(sprTouchscreenDPadJoyMed, 0, 0, 12);
                            }
                            else
                            {
                                draw_sprite(sprTouchscreenDPadJoyMed, 0, 12, 12);
                            }
                        }
                    }
                    
                    surface_reset_target();
                    
                    draw_surface_ext(vKeyJoy_surface, usedDpadX - 24, usedDpadY - 24, 1, 1, 0, c_white, alpha);
                }
                if(android_vk_is_pressed(cC))
                {
                    draw_sprite_ext(sprTouchscreenButtonMed, 1, bax - 24, bay - 24, 1, 1, 0, c_white, alpha);
                }
                else
                {
                    draw_sprite_ext(sprTouchscreenButtonMed, 0, bax - 24, bay - 24, 1, 1, 0, c_white, alpha);
                }
            }
            else
            if(vksize == 2)
            {
                if(drawDPad)
                {
                    surface_set_target(vKeyJoy_surface);
                    draw_clear_alpha(c_black, 0);
                    draw_sprite(sprTouchscreenDPadBaseSmall, 0, 0, 0);
                    
                    if(android_vk_is_pressed(cUP))
                    {
                        if(android_vk_is_pressed(cRIGHT))
                        {
                            draw_sprite(sprTouchscreenDPadJoySmall, 0, 13, 3);
                        }
                        else
                        if(android_vk_is_pressed(cLEFT))
                        {
                            draw_sprite(sprTouchscreenDPadJoySmall, 0, 3, 3);
                        }
                        else
                        {
                            draw_sprite(sprTouchscreenDPadJoySmall, 0, 8, 0);
                        }
                    }
                    else
                    {
                        if(android_vk_is_pressed(cDOWN))
                        {
                            if(android_vk_is_pressed(cRIGHT))
                            {
                                draw_sprite(sprTouchscreenDPadJoySmall, 0, 13, 13);
                            }
                            else
                            if(android_vk_is_pressed(cLEFT))
                            {
                                draw_sprite(sprTouchscreenDPadJoySmall, 0, 3, 13);
                            }
                            else
                            {
                                draw_sprite(sprTouchscreenDPadJoySmall, 0, 8, 16);
                            }
                        }
                        else
                        {
                            if(android_vk_is_pressed(cRIGHT))
                            {
                                draw_sprite(sprTouchscreenDPadJoySmall, 0, 16, 8);
                            }
                            else
                            if(android_vk_is_pressed(cLEFT))
                            {
                                draw_sprite(sprTouchscreenDPadJoySmall, 0, 0, 8);
                            }
                            else
                            {
                                draw_sprite(sprTouchscreenDPadJoySmall, 0, 8, 8);
                            }
                        }
                    }
                    surface_reset_target();
                    draw_surface_ext(vKeyJoy_surface, usedDpadX - 16, usedDpadY - 16, 1, 1, 0, c_white, alpha);
                }
                if(android_vk_is_pressed(cC))
                {
                    draw_sprite_ext(sprTouchscreenButtonSmall, 1, bax - 16, bay - 16, 1, 1, 0, c_white, alpha);
                }
                else
                {
                    draw_sprite_ext(sprTouchscreenButtonSmall, 0, bax - 16, bay - 16, 1, 1, 0, c_white, alpha);
                }
            }
            break;
        case 1:
            // gyroscope controls; display just the jump button, repurposed for resetting the Y axis
            if(vksize == 0)
            {
                if(gyro_origin_is_set)
                {
                    draw_sprite_ext(sprTouchscreenButton, 1, bax - 32, bay - 32, 1, 1, 0, c_white, alpha);
                }
                else
                {
                    draw_sprite_ext(sprTouchscreenButton, 0, bax - 32, bay - 32, 1, 1, 0, c_white, alpha);
                }
            }
            else
            if(vksize == 1)
            {
                if(gyro_origin_is_set)
                {
                    draw_sprite_ext(sprTouchscreenButtonMed, 1, bax - 24, bay - 24, 1, 1, 0, c_white, alpha);
                }
                else
                {
                    draw_sprite_ext(sprTouchscreenButtonMed, 0, bax - 24, bay - 24, 1, 1, 0, c_white, alpha);
                }
            }
            else
            if(vksize == 2)
            {
                if(gyro_origin_is_set)
                {
                    draw_sprite_ext(sprTouchscreenButtonSmall, 1, bax - 16, bay - 16, 1, 1, 0, c_white, alpha);
                }
                else
                {
                    draw_sprite_ext(sprTouchscreenButtonSmall, 0, bax - 16, bay - 16, 1, 1, 0, c_white, alpha);
                }
            }
            break;
        case 2:
            // point controls; nothing to display
            
            break;
    }
    
    var playerId = 0;
    if(objGameData.character_id[playerId] == 1)
    {
        if(objProgram.special_future_current_level &gt;= 7)
        {
            if(room != MM1)
            {
                superIsEnabled = objGameData.rings[playerId]&gt;=50;
                var alreadySuper = false;
                jumping = false;
                if(instance_exists(objPlayer))
                {
                    var player = instance_find(objPlayer, 0);
                    alreadySuper = player.superform;
                    superIsEnabled = superIsEnabled || alreadySuper;
                    jumping = player.jumping;
                }
                if(superIsEnabled)
                {
                    if(alreadySuper)
                    {
                        if(android_vk_is_pressed(cB))
                        {
                            draw_sprite_ext(sprTouchscreenSuperButtonBlue, 1, bbx, bby, 1, 1, 0, c_white, alpha);
                        }
                        else
                        {
                            draw_sprite_ext(sprTouchscreenSuperButtonBlue, 0, bbx, bby, 1, 1, 0, c_white, alpha);
                        }
                    }
                    else
                    {
                        if(android_vk_is_pressed(cB))
                        {
                            draw_sprite_ext(sprTouchscreenSuperButtonYellow, 1, bbx, bby, 1, 1, 0, c_white, alpha);
                        }
                        else
                        {
                            draw_sprite_ext(sprTouchscreenSuperButtonYellow, 0, bbx, bby, 1, 1, 0, c_white, alpha);
                        }
                    }
                }
            }
        }
    }
    draw_sprite_ext(sprTouchscreenPauseButton, 3, bsx, bsy, 1, 1, 0, c_white, alpha);
}
if(notice_timer &gt; 0)
{ 
    notice_timer--;
    if(notice_timer mod 2)
    {
        draw_set_halign(fa_center);
        draw_text_color(213, 120, notice,c_white,c_white,c_yellow,c_yellow,1);
        draw_set_halign(fa_left);
    }
}
//draw_text(0,0,'Y GYRO '+string(android_read_gyroscope_y()));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
