<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>rolled = false;
lines = false;

lines[0, 0] = "SONIC TIME TWISTED";

lines[1, 0] = "ORIGINAL TEAM";

lines[2, 0] = "Game by";
lines[2, 1] = 'Bryce Stock (Overbound)';

lines[3, 0] = "Programmed by";
lines[3, 1] = 'Bryce Stock (Overbound)';
lines[3, 2] = 'Devin Reeves (Mercury)';
lines[3, 3] = 'Joevan Salmon-Johnson (VectorSatyr)';

lines[4, 0] = "Game Art by";
lines[4, 1] = 'Bryce Stock (Overbound)';
lines[4, 2] = 'Dee Liteyears';

lines[5, 0] = "Music by";
lines[5, 1] = 'Hinchy';

lines[6, 0] = "Level Design by";
lines[6, 1] = 'Bryce Stock (Overbound)';
lines[6, 2] = 'Shane (Sparks)';

lines[7, 0] = "Concepts from";
lines[7, 1] = 'Bryce Stock (Overbound)';
lines[7, 2] = 'Debra Ann';
lines[7, 3] = 'Devin Reeves (Mercury)';
lines[7, 4] = 'Hinchy';
lines[7, 5] = 'Joevan Salmon-Johnson (VectorSatyr)';
lines[7, 6] = 'Jonathan Rose (Dimension Warped)';
lines[7, 7] = 'Shane (Sparks)';
lines[7, 8] = 'Tommy C';

lines[8, 0] = "Additional Programming by";
lines[8, 1] = 'Jonathan Rose (Dimension Warped)';
lines[8, 2] = 'Hector Barreiro (Damizean)';
lines[8, 3] = 'Will (Polar Exelion)';

lines[9, 0] = "Additional Music by";
lines[9, 1] = 'Andy Tunstall';
lines[9, 2] = 'Christopher Wright (LarkSS)';
lines[9, 3] = 'Jameson Sutton';
lines[9, 4] = 'Joshua Kruszyna (EXShad)';

lines[10, 0] = "Additional Art by";
lines[10, 1] = 'Andrew75';
lines[10, 2] = 'Andy Tunstall';
lines[10, 3] = 'Apricity';
lines[10, 4] = 'BlazefireLP';
lines[10, 5] = 'Devin Reeves (Mercury)';
lines[10, 6] = 'GameNerd Advance';
lines[10, 7] = 'Hyper Emerson';
lines[10, 8] = 'Kamon62';
lines[10, 9] = 'Pepijn Ryngaert (Gardow)';
lines[10, 10] = 'Shane (Sparks)';
lines[10, 11] = 'SonicGenesis89';
lines[10, 12] = 'Sabrina DiDuro (Strife)';
lines[10, 13] = 'Stevingesus';
lines[10, 14] = 'Vexer';

lines[11, 0] = "Resources from";
lines[11, 1] = 'Sonic Fan Games HQ';
lines[11, 2] = 'Sonic Retro';
lines[11, 3] = 'The Spriters Resource';
lines[11, 4] = 'The Mystical Forest Zone';
lines[11, 5] = 'Toei Animation';

lines[12, 0] = "Special Thanks";
lines[12, 1] = 'Damizean';
lines[12, 2] = 'Ricardo Elso';
lines[12, 3] = 'Rael';
lines[12, 4] = 'Flare';
lines[12, 5] = 'Shard';
lines[12, 6] = 'Icuurd8b42';
lines[12, 7] = 'Chimpo';
lines[12, 8] = 'RogueYoshi';
lines[12, 9] = 'TheouAegis';
lines[12, 10] = 'Sega Scourge';
lines[12, 11] = 'Slingerland';
lines[12, 12] = 'Andrew75';
lines[12, 13] = 'SuperBliz';
lines[12, 14] = 'Debra Ann';
lines[12, 15] = 'Joe Pierce';
lines[12, 16] = 'Noah Copeland';

lines[13, 0] = "CONTRIBUTORS";

lines[14, 0] = "Additional Programming by";
lines[14, 1] = 'Alex Khayrullin';
lines[14, 2] = 'Nik';
lines[14, 3] = 'TabularElf';

lines[15, 0] = "Additional Art by";
lines[15, 1] = 'Alex Khayrullin';
lines[15, 2] = 'bennascar';
lines[15, 3] = 'Romulo Santos';

lines[16, 0] = "LOCALIZATION";

// Inject localization authors
var languages = tr_get_language_codes();

for(var l = 0; l &lt; array_length_1d(languages); l++) {
    if (languages[l] != "en") {
        var array_index = array_height_2d(lines);
        lines[array_index, 0] = tr_get_lang_creditsname(languages[l]);
        lines[array_index, 1] = tr_get_lang_authors(true, languages[l]);    
        var contrib = tr_get_lang_authors(false, languages[l])
        if (contrib != "") {
            var contrib_counter = 2;
            while (string_pos(",", contrib)) {
                lines[array_index, contrib_counter] = string_copy(contrib, 0, string_pos(",", contrib) - 1);
                contrib = string_copy(contrib, string_pos(",", contrib) + 1, string_length(contrib) - string_pos(",", contrib) - 1)
            }
            lines[array_index, contrib_counter] = contrib;  
        }
    }
    
}

// the array above is designed to be easy to edit, now we're converting it to the format we'll actually use
event_user(0);

// calculating the speed and width of the credits
// We're cheating a bit: we know that a letter with the standard font is 9 pixels wide
var width = 0;
lines_count = array_length_1d(lines)+ 8;
for(var i = 0; i &lt; array_length_1d(lines); i++)
{
    width = max(width, 1+8*string_length(lines[i]));
}
center_offset = (width div 2);
cursor = 0;
displayed_label = false;
displayed_label_is_title = false;
displayed_label_is_only_title = false;
for(var i = 0; i &lt; 7; i++)
{
    displayed_label[i] = '';
    displayed_label_is_title[i] = false;
    displayed_label_is_only_title[i] = false;
}

// in the first released version, the credits lasted for 4200 steps
alarm_delay = round(4200/lines_count);
// should be a multiple of 18, otherwise credits will visibly skip pixels
alarm_delay = round(alarm_delay/18)*18;
// add an empty screen
lines_count += array_length_1d(displayed_label);
// the first line will be delayed, in order to make the pauses at the beginning and the 
// end match as much as possible
// use max() in case the resulting value runs close to being negative, which depends on the number of items
alarm[0] = alarm_delay + max(0, (4200 - lines_count * alarm_delay));
// the length of the credits is 4200 frames, or 70 seconds
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// updating the displayed part of the credits
if(cursor &lt; lines_count)
{
    for(var i = 0; i &lt; 6; i++)
    {
        displayed_label[i] = displayed_label[i+1];
        displayed_label_is_title[i] = displayed_label_is_title[i+1];
    }
    var new_row_value = '';
    if(cursor &lt; array_length_1d(lines))
    {
        if(cursor &lt; array_length_1d(lines))
        {
            new_row_value = lines[cursor];
        }
        else
        {
            new_row_value = '';
        }
        
    }
    
    if((string_copy(new_row_value, 1, 3) == '***') &amp;&amp;
        (string_copy(new_row_value, string_length(new_row_value) - 2, 3) == '***')
    )
    {
        new_row_value = string_copy(new_row_value, 4, string_length(new_row_value) - 6);
        displayed_label_is_title[6] = true;
    }
    else
    {
        displayed_label_is_title[6] = false;
    }
    displayed_label[6] = new_row_value;
    cursor++;
    alarm[0] = alarm_delay;
}
else
{
    rolled = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// reorganizing the array - called in Create event
var flat_credits_content = false;

var first = true;
var row_is_title = true;
var index = 0;

for(var i = 0; i &lt; array_height_2d(lines); i++)
{
    if(!first)
    {
        flat_credits_content[index] = '';
        index++;
    }
    else
    {
        first = false;
    }
    row_is_title = true;
    for(var j = 0; j &lt; array_length_2d(lines, i); j++)
    {
        if(row_is_title)
        {
            flat_credits_content[index] = '***'+lines[i,j]+'***';
            index++;
            row_is_title = false;
        }
        else
        {
            flat_credits_content[index] = lines[i,j];
            index++;
        }
    }
}
lines = flat_credits_content;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!rolled)
{
    draw_set_color(c_white);
    draw_set_valign(fa_top);
    draw_set_halign(fa_center);
    draw_set_font(objResources.fontHud);
    
    var y_offset = view_yview[view_current] - 18 + (18 * alarm[0] / alarm_delay);
    for(var i = 0; i &lt; 7; i++)
    {
        var text_alpha = 1;
        if(i == 6)
        {
            text_alpha = (alarm_delay - alarm[0]) / alarm_delay;
        }
        if(displayed_label_is_title[i])
        {
            draw_set_font(objResources.fontHud);
            draw_text_colour(round(view_xview[view_current] + center_offset), round(y_offset + i*18), displayed_label[i],c_white,c_white,c_yellow,c_yellow,text_alpha);
        }
        else
        {
            draw_set_font(objResources.fontHudMin);
            draw_text_colour(round(view_xview[view_current] + center_offset), round(y_offset + i*18), displayed_label[i],c_white,c_white,c_gray,c_gray,text_alpha);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
