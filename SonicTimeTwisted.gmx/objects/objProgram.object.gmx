<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>100</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize

// restore VM math precision as early as possible, if it's YYC.
if (code_is_compiled()) {
    show_debug_message("YYC is enabled, expect weird behaviour.");
    math_set_epsilon(0.00001);
}
init_device_info();
image_speed = 0;
level = "";
/* AUTHOR NOTE: This object controls all global game operations, such as the
level order. */
// state
game_mode = 1;
paused = false;
lost_focus = false;
check_room = 0;
check_cheatcode = false; // will persist across title returns.
// controllers
instance_create(0, 0, objScreen);
inputManager = instance_create(0, 0, objInput);
with(inputManager)
{
    init_input_method();
}
// level data
current_level = -1;
cutscene = 0;
future_list = ds_list_create();
past_list = ds_list_create();
special_future_list = ds_list_create();
special_past_list = ds_list_create();
spawn_tag = 0;
spawn_time = 36000;
temp_spawn_tag = -1;
temp_spawn_time = -1;
temp_mask_rotation = -1;
time_traveling = 0;
in_past = false;
temp_shield = -1;
temp_xspeed = 0;
temp_yspeed = 0;
temp_state = player_state_standby;
temp_animation="idle";
temp_spinning=false;
temp_sprite=sprSonicIdle;
temp_timeline_position=0;
temp_image_index=0;
temp_y=0;
temp_x=0;
temp_yview_offset=0;
temp_xview_offset=0;
temp_fly_value = 0;
ss_perfect_bonus = 0;
ss_rings_bonus = 0;
ss_time_bonus = 0;
// music
jingle = -1;
music = -1;
// set up rings and lives watchers
life_past_list = noone;
ring_past_list = noone;
life_future_list = noone;
ring_future_list = noone;
// -1 - subgame ; 0 - no save; &gt; 1 - saved game
saveSlot=0;
special_past_current_level=0;
special_future_current_level=0;
temp_superform = false;
// this map is used if playing in the no-save mode
no_save_data = ds_map_create();

// randomize seed
randomize();
// create geometric tables
for (var i = 360; i &gt; -1; i--)
{
    sine[i] = sin(degtorad(i));
    cosine[i] = cos(degtorad(i));
}
// start critical processes
instance_create(0, 0, objGameData);
instance_create(0, 0, objMusic);
tr_init();
instance_create(0, 0, objResources);
// start critical processes
// add levels to list
//PLEASE NOTE THE TRUE LEVEL ORDER IS AAZ, FFZ, VVZ, DDZ, TTZ, SSZ, RRZ, PPZ
level_add(AA1_f, AA1_p);
level_add(intro1,introPast1);
level_add(AA2_f, AA2_p);
level_add(RR1_f, RR1_p);
level_add(RR2_f, RR2_p);
level_add(FF1_f, FF1_p);
level_add(FF2_f, FF2_p);
level_add(VV1_f, VV1_p);
level_add(VV2_f, VV2_p);
level_add(DD1_f, DD1_p);
level_add(DD2_f, DD2_p);
level_add(TT1_f, TT1_p);
level_add(TT2_f, TT2_p);
level_add(SS1,SS1);
level_add(PP1,PP1);
level_add(PP2,PP2);
level_add(MM1,MM1);
level_add(ending,ending);
// add special stages
special_level_add(SSF1, SSP1);
special_level_add(SSF2, SSP2);
special_level_add(SSF3, SSP3);
special_level_add(SSF4, SSP4);
special_level_add(SSF5, SSP5);
special_level_add(SSF6, SSP6);
special_level_add(SSF7, SSP7);

load_options_platform_dependant();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_map_destroy(no_save_data);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>check_room  = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///React to saveload events from the PS's firmware.

// is this an audiogroup event?
if (ds_map_exists(async_load, "group_id"))
{
    show_debug_message("Loaded Audiogroup ID " + string(async_load[? "group_id"]));
    exit;
}

if (objProgram.device_info &amp; DEVICE_OS_PLAYSTATION)
{
    show_debug_message("[STT-PS]: async_load ds map as JSON:");
    show_debug_message(json_encode(async_load));
    
    var _id = async_load[? "id"];
    var _status = async_load[? "status"]; // true or false
    var _error = async_load[? "error"]; // PS error code or 0 if OK.
    var _ok = (_status == true &amp;&amp; _error == 0);
    
    if (_id == async_id)
    {
        if (!_ok)
        {
            show_debug_message("[STT-PS]: Savedata load failed " + string(_error) + " " + string(_status));
        }
        
        if (async_loading)
        {
            async_loading = false;
            
            for (var _k = ds_map_find_first(storage_buffers);
                ds_map_exists(storage_buffers, _k);
                _k = ds_map_find_next(storage_buffers, _k)) {
                
                var _v = storage_buffers[? _k];
                
                storage_map[? _k] = buffer_read(_v, buffer_string);
                buffer_delete(_v);
                show_debug_message("[STT-PS]: Loaded file " + _k);
            }
            
            ds_map_clear(storage_buffers);
            
            event_user(1);
        }
        else
        {
            for (var _k = ds_map_find_first(storage_buffers);
                ds_map_exists(storage_buffers, _k);
                _k = ds_map_find_next(storage_buffers, _k)) {
                
                var _v = storage_buffers[? _k];
                
                buffer_delete(_v);
            }
            
            ds_map_clear(storage_buffers);
            show_debug_message("[STT-PS]: Saved!");
        }
    }
    
    async_busy = false;
    
    var p = inputManager.pad;
    if (gamepad_button_check(p, gp_face1)
    &amp;&amp;  gamepad_button_check(p, gp_face3)
    &amp;&amp;  gamepad_button_check(p, gp_face4)
    &amp;&amp;  gamepad_button_check(p, gp_start))
    {
        show_debug_overlay(true);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Start the game

/* AUTHOR NOTE: May want to setup a title screen or menu here. For now, we'll
start the game immediately. */
first_run = !load_options();
with (inputManager) input_load();
with (objResources) event_user(0);
if (first_run)
{
    // Prevent disclaimer from showing up again.
    save_options();
    stt_save_files();
}
if(!show_startup_window())
{
    room_goto(titlescreen);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Apply video settings.
apply_video_settings();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_texture_flush();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Clean up
audio_stop_all();
d3d_end();

if (objProgram.device_info &amp; DEVICE_OS_PLAYSTATION) {
    if (ds_exists(storage_buffers, ds_type_map)) {
        for (var _k = ds_map_find_first(storage_buffers);
             ds_map_exists(storage_buffers, _k);
             _k = ds_map_find_next(storage_buffers, _k)) {
            var _v = storage_buffers[? _k];
            if (buffer_exists(_v)) buffer_delete(_v);
        }
        ds_map_destroy(storage_buffers);
    }
    
    if (ds_exists(storage_map, ds_type_map)) {
        ds_map_destroy(storage_map);
    }
}

if (ds_exists(no_save_data, ds_type_map)) ds_map_destroy(no_save_data);
if (ds_exists(future_list, ds_type_list)) ds_list_destroy(future_list);
if (ds_exists(past_list, ds_type_list)) ds_list_destroy(past_list);
if (ds_exists(special_future_list, ds_type_list)) ds_list_destroy(special_future_list);
if (ds_exists(special_past_list, ds_type_list)) ds_list_destroy(special_past_list);

// free arrays.
sine = 0;
cosine = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw save progress (if on consoles)

if (objProgram.device_info &amp; DEVICE_OS_PLAYSTATION)
{
    if (async_busy/* || true*/)
    {
        draw_set_font(objResources.fontHud);
        draw_set_halign(fa_right);
        draw_set_valign(fa_bottom);
        
        var _margin = 16; // always leave a margin for weird TVs.
        var _string = tr("_PS_SAVING"); // ...DO NOT POWER OFF!
        if (async_loading) _string = tr("_PS_LOADING");
        
        draw_text_colour(
            display_get_gui_width() - _margin,
            display_get_gui_height() - _margin,
            _string,
            c_red,
            c_red,
            c_white,
            c_white,
            1);
            
        draw_set_halign(fa_left);
        draw_set_valign(fa_top);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="114">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Print current memory usage.
print_mem_usage();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="113">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// only available for windows
if(objProgram.device_info &amp; DEVICE_TYPE_COMPUTER)
{
    game_restart();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
