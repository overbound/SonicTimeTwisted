<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>100</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize
image_speed = 0;
level = "";
/* AUTHOR NOTE: This object controls all global game operations, such as the
level order. */
// state
game_mode = 1;
paused = false;
lost_focus = false;
check_room = 0;
// controllers
inputManager = instance_create(0, 0, objInput);
// level data
current_level = -1;
cutscene = 0;
future_list = ds_list_create();
past_list = ds_list_create();
special_future_list = ds_list_create();
special_past_list = ds_list_create();
spawn_tag = 0;
spawn_time = 36000;
temp_spawn_tag = -1;
temp_spawn_time = -1;
time_traveling = 0;
in_past = false;
temp_shield = -1;
temp_xspeed = 0;
temp_yspeed = 0;
temp_state = player_state_standby;
temp_animation="idle";
temp_spinning=false;
temp_sprite=sprSonicIdle;
temp_timeline_position=0;
temp_image_index=0;
temp_y=0;
temp_x=0;
temp_yview_offset=0;
temp_xview_offset=0;
stop_sound = true;
ss_perfect_bonus = 0;
ss_rings_bonus = 0;
ss_time_bonus = 0;
//game_directory="%localappdata%\Sonic_Time_Twisted\"
game_directory="\Sonic_Time_Twisted\";
// music
jingle = -1;
music = -1;
music_queue = ds_priority_create();
// set up rings and lives watchers
life_past_list = noone;
ring_past_list = noone;
life_future_list = noone;
ring_future_list = noone;
// -1 - subgame ; 0 - no save; &gt; 1 - saved game
saveSlot=0;
special_past_current_level=0;
special_future_current_level=0;
temp_superform = false;
// this might vary between platforms - button allowing cancelling some operations
back_button = vk_escape;
// and this is the label for the button in question - is shown in some messages
back_button_label = 'ESCAPE';
score_tally_mode = 0;
first_run = !is_settings_file_present();
load_options();
// this map is used if playing in the no-save mode
no_save_data = ds_map_create();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_map_destroy(no_save_data);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>check_room  = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Handle jingle
//if not (paused or lost_focus) and jingle&gt;-1 and not audio_is_playing(jingle) {audio_music_gain(objGameData.volume_music, 400); jingle = -1;}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>debug_mode</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>false</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Window focus
// ignore if we've paused manually
if paused exit;

/*
if(DEVICE_INFO &amp; DEVICE_TYPE_COMPUTER)
{
    // toggle focus
    if not (lost_focus xor window_has_focus()) {lost_focus = not lost_focus; game_pause(lost_focus);}
}
else
{
    if(DEVICE_INFO &amp; DEVICE_TYPE_SMARTPHONE)
    {
        // toggle focus
        if not (lost_focus xor (!os_is_paused())) {lost_focus = not lost_focus; game_pause(lost_focus);}
    }
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_texture_flush();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Clean up
audio_stop_all();
d3d_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Start the game
// randomize seed
randomize();
// create geometric tables
globalvar sine, cosine;
for (var i=0; i&lt;360; i+=1) {sine[i] = sin(degtorad(i)); cosine[i] = cos(degtorad(i));}
// start critical processes
instance_create(0, 0, objScreen);
instance_create(0, 0, objResources);
instance_create(0, 0, objGameData);
instance_create(0, 0, objMusic);
// add levels to list
//PLEASE NOTE THE TRUE LEVEL ORDER IS AAZ, FFZ, VVZ, DDZ, TTZ, SSZ, RRZ, PPZ
level_add(AA1_f, AA1_p);
level_add(intro1,introPast1);
level_add(AA2_f, AA2_p);
level_add(RR1_f, RR1_p);
level_add(RR2_f, RR2_p);
level_add(FF1_f, FF1_p);
level_add(FF2_f, FF2_p);
level_add(VV1_f, VV1_p);
level_add(VV2_f, VV2_p);
level_add(DD1_f, DD1_p);
level_add(DD2_f, DD2_p);
level_add(TT1_f, TT1_p);
level_add(TT2_f, TT2_p);
level_add(SS1,SS1);
level_add(PP1,PP1);
level_add(PP2,PP2);
level_add(MM1,MM1);
level_add(ending,ending);
// add special stages
special_level_add(SSF1, SSP1);
special_level_add(SSF2, SSP2);
special_level_add(SSF3, SSP3);
special_level_add(SSF4, SSP4);
special_level_add(SSF5, SSP5);
special_level_add(SSF6, SSP6);
special_level_add(SSF7, SSP7);
/*
special_level_add(SSF1, SSP7);
special_level_add(SSF2, SSP1);
special_level_add(SSF3, SSP3);
special_level_add(SSF6, SSP4);
special_level_add(SSF5, SSP5);
special_level_add(SSF7, SSP2);
special_level_add(SSF4, SSP6);
*/
/* AUTHOR NOTE: May want to setup a title screen or menu here. For now, we'll
start the game immediately. */
//room_goto(ending);
room_goto(titlescreen);
// start gameplay
//level_goto_next();
audio_set_master_gain(0, 0.75);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="123">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// only available for windows
/*
if(DEVICE_INFO &amp; DEVICE_TYPE_COMPUTER)
{
    delete_settings();
}*/
objEasyAsyncController.do_save = false;
game_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="113">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// only available for windows
if(DEVICE_INFO &amp; DEVICE_TYPE_COMPUTER)
{
    objEasyAsyncController.do_save = false;
    game_restart();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
