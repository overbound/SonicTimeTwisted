<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprMoleGunBody</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objEnemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize
image_speed = 0;
offscreen_enabled = true;
// state machine
state = 0;
timer = 0;
frozen=false
// physics
facing = 1;
wall_facing = 0;
cliff_facing = 0;
offset_x = (bbox_right - bbox_left) * 0.5;
offset_y = (bbox_bottom - y);
// other
speed_cap = 1.5;
acceleration = 0.02;
stopped = false;
x_origin = x;
arm_angle = 0;
arm_timer = 0;
gun_angle = degtorad(270);
offset_x = 5;
offset_y = sprite_height-sprite_get_yoffset(sprite_index);
hand_point_x = x - facing * 10 + facing * 16 * cos(arm_angle);
hand_point_y = y - 1 + 16 * sin(arm_angle);
damage_point_x = x;
damage_point_y = y;
target = noone;
store_speed = hspeed;
store_facing = facing;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>frozen = false;
/// Release debris
with instance_create(x-12, y-8, objShieldIceBlockDebris) {depth = other.depth-1; hspeed = -2; vspeed = -4;}
with instance_create(x+12, y-8, objShieldIceBlockDebris) {depth = other.depth-1; hspeed = 2; vspeed = -4; image_index = 1;}
with instance_create(x-12, y+8, objShieldIceBlockDebris) {depth = other.depth-1; hspeed = -2; vspeed = -2; image_index = 2;}
with instance_create(x+12, y+8, objShieldIceBlockDebris) {depth = other.depth-1; hspeed = 2; vspeed = -2; image_index = 3;}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>allow turn</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>frozen</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>false</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement and collision
// reset collision data
wall_facing = 0;
cliff_facing = 0;
// wall collision
if collision_ray(offset_x, 0, 0, objSolid)
{
    x -= hspeed;
    wall_facing = sign(hspeed);
}
else
{
    // upward slope
    while collision_ray(offset_x, offset_y, 0, objSolid) y -= 1;
    // downward slope
    for (var i = 0; i &lt; offset_y * 2; i += 1) {if collision_ray(offset_x, offset_y + 1, 0, objSolid) break; y += 1;}
    if (i == offset_y*2)
    {
        // reverse direction
        x -= hspeed;
        y -= offset_y * 2;
        cliff_facing = sign(hspeed);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Animation
image_index = ((x - x_origin) / 12) mod 4;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>frozen</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>false</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>-1</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>timer</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>1</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>frozen</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>false</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Enemy behavior
// we've stopped this frame
if stopped {stopped = false; speed = 0; x_origin = x;}
// state machine
switch (state)
{
case 0: // patrolling
    // accelerate
    if speed &lt; speed_cap
    {
        speed += acceleration;
        if speed &gt; speed_cap speed = speed_cap;
    }
    // turn around on hitting walls
    if (wall_facing != 0)
    {
        store_facing = -wall_facing;
        store_speed = hspeed * -wall_facing;
        state = 1
        stopped = true;
        break;
    }
    // turn around at cliff-side
    if timer &gt; 15 and (cliff_facing != 0)
    {
        store_facing = -facing;
        store_speed = -hspeed;
        state = 1;
        stopped = true;
        break;
    }
    gun_angle = degtorad(270);
    arm_timer += pi / 45;
    arm_angle = pi / 6 * cos(arm_timer);
    if (arm_timer &gt;= (2 * pi)) arm_timer -= 2 * pi;
    // wait a second before locking on
    if (timer &gt;= 60)
    {
        with objPlayer
        {
            var x_delta = (x - other.x) * other.facing;
            if x_delta &gt; 0 and x_delta &lt; 200
            {
                //lock on
                other.state = 2;
                other.stopped = true;
                other.timer = 0;
                other.store_facing = other.facing;
                other.store_speed = other.hspeed;
                other.hspeed = 0;
                other.target = id;
                break;
            }
        }
    }
    break;
case 1: // turning
    hspeed = store_speed;
    facing = store_facing;
    timer = 0;
    state = 0;
    gun_angle = degtorad(270);
    break;
case 2: // aiming
    if instance_exists(target)
    {
        if (facing &gt; 0) arm_angle = degtorad(point_direction(x, target.y, target.x, y)); else
        arm_angle = degtorad(point_direction(target.x, target.y, x, y));
    }
    if (arm_angle &lt; (3 * pi / 2) and arm_angle &gt; (pi / 2)) arm_angle = (3 * pi / 2);
    if (timer == 40)
    {
        state = 3
        timer = 0
        arm_sweep_origin = arm_angle
        break;
    }
    gun_angle = arm_angle;
    break;
case 3: // firing
    if not audio_is_playing(sndFireBlow) play_sfx(sndFireBlow, 3);
    if (timer == 120)
    {
        state = 0
        timer = 0
        facing = store_facing
        hspeed = store_speed
        break;
    }
    arm_angle = arm_sweep_origin + (pi * 0.125) * sin(timer * 0.1);
    gun_angle = arm_angle;
}
hand_point_x = x - facing * 10 + facing * 24 * cos(arm_angle);
hand_point_y = y - 1 + 24 * sin(arm_angle);
damage_point_x = hand_point_x + facing * (13 * cos(gun_angle) - 2);
damage_point_y = hand_point_y + 13 * sin(gun_angle);
if (state == 3) and ((timer mod 6) == 0)
{
    var fire_x = hand_point_x + facing * (24 * cos(gun_angle) - 2);
    var fire_y = hand_point_y + 24 * sin(gun_angle);
    var fire = instance_create(fire_x, fire_y, objMoleGunFire);
    fire.hspeed = facing * cos(arm_angle) * 1.75;
    fire.vspeed = sin(arm_angle) * 1.75;
    fire.alarm[0] = 60;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objShieldIceAttack">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Freeze enemy
alarm[1] = 180;
hspeed = 0;
frozen = true;
// destroy icicle
with other instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objEnemyTurn">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if state != 1 &amp;&amp; alarm[0] == -1 {
    if x &gt; other.x {
        wall_facing = -1;
    } else wall_facing = 1;
    store_facing = -wall_facing;
    store_speed = abs(hspeed) * -wall_facing;
    state = 1
    stopped = true;
    alarm[0] = 80;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Render Mole
// mole body
if sprite_index &gt; -1 draw_sprite_ext(sprite_index, image_index, floor(x), floor(y)+1, image_xscale * facing, image_yscale, gravity_angle(), image_blend, image_alpha);
// arm links
draw_sprite(sprMoleArmLink, 0, x - (facing * 10) + (facing * (8) * cos(arm_angle)), y  + (8) * sin(arm_angle));
draw_sprite(sprMoleArmLink, 0, x - (facing * 10) + (facing * (16) * cos(arm_angle)), y  + (16) * sin(arm_angle));
// gun
draw_sprite_ext(sprMoleGun, 0, hand_point_x, hand_point_y, facing, 1, radtodeg(facing * -gun_angle), c_white, 1);
// debug only
if debug_mode draw_circle_color(damage_point_x, damage_point_y, 7, c_red, c_fuchsia, true);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>frozen</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>true</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Render ice block
// get offset from time
var offset = (-1+(((90-alarm[1]) div 4) mod 2)*2)*(alarm[1]&lt;45);
// draw ice block
draw_sprite(sprShieldIceBlock, 0, x+offset, y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>22,11</point>
    <point>22,22</point>
  </PhysicsShapePoints>
</object>
