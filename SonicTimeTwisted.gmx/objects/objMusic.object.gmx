<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize
enum MUSIC_STATE {
    SILENCE,     // 0
    MUSIC_INTRO, // 1
    MUSIC_LOOP,  // 2
    BOSS_INTRO,  // 3
    BOSS_LOOP,   // 4
    JINGLE,      // 5
    EFFECT       // 6
};

state = MUSIC_STATE.SILENCE;
statePrevious = state;
// music types
musicIntro = -1;
musicLoop = -1;
bossIntro = -1;
bossLoop = -1;
musicJingle = -1;
musicEffect = -1;
currentMusic = -1;
// music asset indexes
musicIntroAsset = -1;
musicLoopAsset = -1;
bossIntroAsset = -1;
bossLoopAsset = -1;
musicJingleAsset = -1;
musicEffectAsset = -1;
// previous positions
previousPosition = 0;
previousPositionIntro = 0;
previousPositionLoop = 0;
previousPositionBossIntro = 0;
previousPositionBossLoop = 0;
previousPositionJingle = 0;
previousPositionEffect = 0;
// default fall back (only musicIntro(1) or bossIntro(3))
priorityMusicState = MUSIC_STATE.MUSIC_INTRO;

// volume variables.
sfxGain = 100;
bgmGain = 100;
masterGain = 75;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug stuff...

if (keyboard_check_pressed(vk_f6)) {
    // icon box
    player_get_lives(1);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Music State
switch (state) { // MUSIC_STATE.
    case MUSIC_STATE.SILENCE: // silence
        // Do nothing.
        break;
    case MUSIC_STATE.MUSIC_INTRO: // Play Music Intro
        if (!audio_is_playing(musicIntro)) {
            play_music_loop(musicLoopAsset, 0);
        }
        break;
    case MUSIC_STATE.MUSIC_LOOP: // Play Music Loop
        if (!audio_is_playing(musicLoop)) {
            play_music_loop(musicLoopAsset, 0);
        }
        break;
    case MUSIC_STATE.BOSS_INTRO: // Play Boss Intro
        if (!audio_is_playing(bossIntro)) {
            play_boss_loop(bossLoopAsset, 0);
        }
        break;
    case MUSIC_STATE.BOSS_LOOP: // Play Boss Loop
        if (!audio_is_playing(bossLoop)) {
            play_boss_loop(bossLoopAsset, 0);
        }
        break;
    case MUSIC_STATE.JINGLE: // Play Jingle
        if (!audio_is_playing(musicJingle)) {
            var pstate = priorityMusicState;
            if (statePrevious != MUSIC_STATE.JINGLE &amp;&amp; statePrevious != MUSIC_STATE.EFFECT) {
                pstate = statePrevious;
            } 
            play_previous(pstate);
        }
        break;
    case MUSIC_STATE.EFFECT: // Play Effect
        var levelHandle = noone;
        if (instance_exists(objLevel)) {
            levelHandle = objLevel;
        } else if (instance_exists(objSSLevel)) {
            levelHandle = objSSLevel;
        }
        
        if (instance_exists(levelHandle)) { 
            if (!audio_is_playing(musicEffect) &amp;&amp; !levelHandle.cleared) {
                if (statePrevious == MUSIC_STATE.JINGLE) {
                    if (audio_is_playing(musicJingle)) {
                        audio_sound_gain(musicJingle, bgmGain / 100, 200);
                        state = MUSIC_STATE.JINGLE;
                        break;
                    }
                    else {
                        play_previous(priorityMusicState);
                    }
                }
                else {
                    play_previous(priorityMusicState);
                }
            }
       }
       break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Synchronize sound variables with the audio system.
audio_master_gain(masterGain / 100);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Stop all audio
stop_all_music(false, true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
