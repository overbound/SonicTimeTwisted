<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize
state = 0;
statePrevious = 0;
// music types
musicIntro = noone;
musicLoop = noone;
bossIntro = noone;
bossLoop = noone;
musicJingle = noone;
musicEffect = noone;
previousPosition = 0;
currentMusic = noone;
// music asset indexes (should ONLY be used in audio_play_sound!)
musicIntroAsset = -1;
musicLoopAsset = -1;
bossIntroAsset = -1;
bossLoopAsset = -1;
musicJingleAsset = -1;
musicEffectAsset = -1;
// default fall back (only musicIntro(1) or bossIntro(3))
priorityMusicState = 1;

// volume variables.
sfxGain = 100;
bgmGain = 100;
masterGain = 75;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Music State
switch (state) {
    case 0: // silence
        // Do nothing!
        break;
    case 1: // Play Music Intro
        if (!audio_is_playing(musicIntro)) {
            play_music_loop(musicLoopAsset, 0);
        }
        break;
    case 2: // Play Music Loop
        if (!audio_is_playing(musicLoop)) {
            play_music_loop(musicLoopAsset, 0);
        }
        break;
    case 3: // Play Boss Intro
        if (!audio_is_playing(bossIntro)) {
            play_boss_loop(bossLoopAsset, 0);
        }
        break;
    case 4: // Play Boss Loop
        if (!audio_is_playing(bossLoop)) {
            play_boss_loop(bossLoopAsset, 0);
        }
        break;
    case 5: // Play Jingle
        if (!audio_is_playing(musicJingle)) {
            if (statePrevious != 5 &amp;&amp; statePrevious != 6) {
                play_previous(statePrevious, previousPosition);
            } 
            else {
                play_previous(priorityMusicState, previousPosition);
            }
        }
        break;
    case 6: // Play Effect
        var levelHandle = noone;
        if (instance_exists(objLevel)) {
            levelHandle = objLevel;
        } else if (instance_exists(objSSLevel)) {
            levelHandle = objSSLevel;
        }
        
        // Technically we should always get an existing levelHandle
        if (instance_exists(levelHandle)) { 
            if (!audio_is_playing(musicEffect) &amp;&amp; !levelHandle.cleared) {
                if (statePrevious == 5) {
                    if (audio_is_playing(musicJingle)) {
                        audio_sound_gain(musicJingle, bgmGain / 100, 200);
                        state = 5; // Play Jingle
                        break;
                    }
                    else {
                        play_previous(priorityMusicState, previousPosition);
                    }
                }
                else {
                    play_previous(priorityMusicState, previousPosition);
                }
            }
        }
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Synchronize sound variables with the audio system.
audio_master_gain(masterGain / 100);
show_debug_message("objMusic: Synchronized master gain with GM.");
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
