<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize input device
image_speed = 0;
var i;
// input flag - outside of this object, use set_input_enabled to change this flag
flag_player_input = true;
// computer controls
computer_input_setup();
// input id
device_id = instance_number(objInput)-1;
// input state
state = 0;
previous_state = 0;
state_press = 0;
state_release = 0;
// axes
x_axis = 0;
y_axis = 0;
pad = -1;
paddesc = "";
padcount = gamepad_get_device_count();
padids = ds_list_create();
device_label = '';
for (i = padcount - 1; i &gt; -1; i--) padarray[i] = false;
button_count = 0;
axis_count = 0;
// references gamepad mappings in order for handling main/backup mappings
gamepad_mapping_count = 0;
// input stream
stream = -1;
stream_size = $FF;
// touchscreen initialization
is_touchscreen = false;
is_fallback_touchscreen = false;

// rumble/haptics
rumble_queue = ds_queue_create();
rumble_configuration_script = input_method_dummy_script;
rumble_enabled = false;

// analog controls
deadzone = 0.5;
deadzone_int = 50;
analog_in_zones = false;
analog_in_ss = false;
analog_in_gg = false;
analog_x = 0.0;
analog_y = 0.0;
analog_d = 0.0;
analog_enabled = true;
analog_applied = false;
analog_deadzone_min = 0.2;
analog_deadzone_max = 0.95;
analog_ss_min_angle = 15;
analog_ss_max_angle = 30;
input_analog_script = analog_postprocess_dummy;
gpanalog_in_zones = false;
gpanalog_in_ss = false;
gpanalog_in_gg = false;
gpanalog_deadzone_min = 0.2;
gpanalog_deadzone_max = 0.95;
gpanalog_ss_min_angle = 15;
gpanalog_ss_max_angle = 30;
touchanalog_in_zones = false;
touchanalog_in_ss = false;
touchanalog_in_gg = false;
touchanalog_deadzone_min = 0.2;
touchanalog_deadzone_max = 0.95;
touchanalog_ss_min_angle = 15;
touchanalog_ss_max_angle = 30;

// input devices management
input_init_script = input_method_dummy_script;
input_manage_script = input_method_dummy_script;
input_rumble_trigger_script = input_method_dummy_script;
input_rumble_manage_script = input_method_dummy_script;
input_rumble_perform_script = input_method_dummy_script;
input_draw_script = input_method_dummy_script;
input_init_script_fallback = input_method_dummy_script;
input_manage_script_fallback = input_method_dummy_script;
input_draw_script_fallback = input_method_dummy_script;
input_method = 0;
input_method_fallback = 0;
input_method_autodetected = 0;
use_fallback = false;
rumble_strength = 50;

smartphone_controls_enabled = false;
// initialize touchscreen-specific controls without copy-pasting everything, there are a lot of variables
input_load_touchscreen_controls(false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Clean up
if (ds_exists(stream, ds_type_list)) ds_list_destroy(stream);
if (ds_exists(rumble_queue, ds_type_queue)) ds_queue_destroy(rumble_queue);
ds_list_destroy(padids);
computer_input_reset_state();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Android: used to prevent accidental back and forth touchscreen/gamepad switching
sttandroid_input_set_any_pressed_handled(true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>counter for pressing gamepad buttons</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>computer_input_reset_state();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update states

// clear states
previous_state = state;
state = 0;
state_press = 0;
state_release = 0;

// show_debug_message("SCRIPT: "+script_get_name(input_manage_script));
with (objScreen) event_user(4);

script_execute(input_manage_script);
if(use_fallback)
{
    // show_debug_message("FALLBACK SCRIPT: "+script_get_name(input_manage_script_fallback));
    // only in menus
    script_execute(input_manage_script_fallback);
}

// default "back" button - ESC on PC, Back on smartphones
// calls the menu, guaranteed to be available on every platform
if(keyboard_check(DEVICE_BACK_BUTTON))
{
    state |= cBACK;
}
// axes
x_axis = 0;
if (state &amp; cLEFT &amp;&amp; flag_player_input) || (computer_cLEFT &amp;&amp; !flag_player_input) x_axis -= 1;
if (state &amp; cRIGHT &amp;&amp; flag_player_input) || (computer_cRIGHT &amp;&amp; !flag_player_input) x_axis += 1;
y_axis = 0;
if (state &amp; cUP &amp;&amp; flag_player_input) || (computer_cUP &amp;&amp; !flag_player_input) y_axis -= 1;
if (state &amp; cDOWN &amp;&amp; flag_player_input) || (computer_cDOWN &amp;&amp; !flag_player_input) y_axis += 1;

// pressing and releasing
state_press = (state &amp; previous_state) ^ state;
state_release = (state &amp; previous_state) ^ previous_state;

// Manage rumble/haptic
script_execute(input_rumble_manage_script);
script_execute(input_rumble_perform_script);

// update analog used
analog_applied = false;
if (analog_enabled) {
    // thank you GML in 1.4.9999 for analyzing all conditions in if (&amp;&amp;) no matter the returned values...
    analog_applied = (x_axis == 0) &amp;&amp; (y_axis == 0);
}

previous_state = state;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Detect gamepads
switch (async_load[?"event_type"]) {
case "gamepad discovered":
    var index = async_load[?"pad_index"];
    show_debug_message('Slot: ' + string(index));
    show_debug_message('Model: ' + gamepad_get_description(index));
    ds_list_add(padids, index);
    padarray[index] = true;
    
    break;
case "gamepad lost":
    var index = async_load[?"pad_index"];
    var found = false;
    padarray[index] = false;
    
    show_debug_message('Lost pad at slot ' + string(pad));
    
    if (pad == index) {
        pad = -1;
        paddesc = '';
    }
    
    var index_to_remove = ds_list_find_index(padids, index);
    if (index_to_remove &gt; -1) {
        ds_list_delete(padids, index_to_remove);
    }
    
    // That disconnected gamepad was the last.
    if (ds_list_empty(padids)) {
        show_debug_message("All gamepads are disconnected!");
        /*
            A hint for those who want to port STT to Switch,
            here you can invoke the joycon applet,
            look at this, all controllers are disconnected, gameplay cannot progress any further,
            by N's regulations you must ask the player to connect at least one controller.
        */
    }
    
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Delete input stream
if (ds_exists(stream, ds_type_list)) ds_list_destroy(stream);
computer_input_reset_state();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create input stream
reinit_input_method();
stream = ds_list_create();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Rerun input init script: necessary for smartphone, transparent for PC
script_execute(input_init_script);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Enable fallback controls unconditionally on certain maps: title screen, save screen
switch(room)
{
    case titlescreen:
    case saveSelect:
        use_fallback = true;
        break;
    default:
        use_fallback = false;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Enable/disable analog controls
refresh_analog_controls_enabled();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Clean up
if (ds_exists(stream, ds_type_list)) ds_list_destroy(stream);
if (ds_exists(rumble_queue, ds_type_queue)) ds_queue_destroy(rumble_queue);
computer_input_reset_state();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>script_execute(input_draw_script);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
