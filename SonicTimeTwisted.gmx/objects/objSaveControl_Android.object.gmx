<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>drag_x = 0;
drag_y = 0;
press_x = 0;
press_y = 0;
hold_pressed = false;
hold_threshold = 30;
hold_counter = 0;
// direction where the cursor should move, 0 - left, 1 - right
dir_snap = 0;
snap_timer = 0;
target = objSaveControl.selectCheck;
if(objProgram.inputManager.input == 0)
{
    objSaveControl.stageDeleteConfirmSprite = sprDeleteConfirmTouchscreen;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(snap_timer &gt; 0)
{
    snap_timer--;
    if(snap_timer &lt;= 0)
    {
        snap_timer = 0;
 /*       if(dir_snap)
        {
            keyboard_key_release(vk_right);
        }
        else
        {
            keyboard_key_release(vk_left);
        }
        */
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// add touchscreen support to this screen
if(device_mouse_check_button_pressed(0, mb_left))
{
    hold_counter = 0;
    hold_pressed = true;
    press_x = device_mouse_x_to_gui(0);
    press_y = device_mouse_y_to_gui(0);
}
// if a key is pressed: switch to using them instead
if input_check_pressed(cLEFT) {
    target = min (8, max(0, target - 1));
    
}
if input_check_pressed(cRIGHT) {
    target = min (8, max(0, target + 1));
}
if(objSaveControl.selectState == 0)
{
    // in this state, all movements are used to select a save slot
    // if we need to move the cursor to a different slot - do so
    if(target &lt; objSaveControl.selectCheck)
    {
        with(objSaveControl)
        {
            xSpeed=-1;
            selectCheck -=1;
            audio_play_sound(sndBeep,10,false);
        }
    }
    if(target &gt; objSaveControl.selectCheck)
    {
        with(objSaveControl)
        {
            xSpeed=1;
            selectCheck +=1;
            audio_play_sound(sndBeep,10,false);
        }
    }
    
    // drag the screen
    if(hold_pressed)
    {
        hold_counter++;
        if(hold_counter &gt;= hold_threshold)
        {
            hold_counter = hold_threshold;
            drag_x = device_mouse_x_to_gui(0);
            drag_y = device_mouse_y_to_gui(0);
            
            if(snap_timer == 0)
            {
                if(drag_x &lt; press_x - 100)
                {
                    target = min(target + 1, 8);
                    press_x = press_x - 100;
                    
                }
                if(drag_x &gt; press_x + 100)
                {
                    target = max(target - 1, 0);
                    press_x = press_x + 100;
                }
            }
        }
    }
    if(device_mouse_check_button_released(0, mb_left))
    {
        // if the button is released before the drag threshold has passed - act as a click
        if(hold_counter &lt; hold_threshold)
        {
            var doClick = false;
            if(point_in_rectangle(
                device_mouse_x(0), device_mouse_y(0),
                objSaveControl.bbox_left,
                objSaveControl.bbox_top,
                objSaveControl.bbox_right,
                objSaveControl.bbox_bottom
            ))
            {
                // clicked on a selected slot or delete operation
                doClick = true;
            }
            else
            {
                // clicked on a different slot - move on to that slot
                var sslot = instance_position(device_mouse_x(0),device_mouse_y(0), objSaveSlot );
                if(sslot != noone)
                {
                    if(objSaveControl.selectCheck == sslot.slotNumber)
                    {
                        doClick = true;
                    }
                    else
                    {
                        target = sslot.slotNumber;
                    }
                }
                else
                {
                    sslot = instance_position(device_mouse_x(0),device_mouse_y(0), objDeleteSlot );
                    if(sslot != noone)
                    {
                        if(objSaveControl.selectCheck == 8)
                        {
                            doClick = true;
                        }
                        else
                        {
                            target = 8;
                        }
                    }
                }
            }
            if(doClick)
            {
                with(objSaveControl)
                {
                    if(selectCheck != 8)
                    {
                        if sprite_index == sprSaveDelete {
                            selectState=3;
                        }
                        else
                        {
                            var filename = save_file_name(selectCheck);
                            if !eas_file_exists(filename) {
                                selectState = 2;
                                allowLevelStart = false;
                            } else {
                
                                selectState = 1;
                            }
                        }
                    }
                    else
                    {
                        if sprite_index == sprSaveControl{
                            //selectState=3;
                            sprite_index=sprSaveDelete;
                            image_speed=.25;
                        } else {
                            sprite_index=sprSaveControl;
                            image_speed=0;
                        }
                    }
                }
                
            }
        }
        hold_pressed = false;
    }
}
else
if(objSaveControl.selectState == 1)
{
    // in this state, sliding vertically allows to select a level
    // sliding horizontally or clicking on the icon allows to select a time period
    // cliking a second time on the selected time period or elsewhere on the save slot starts the game
    // clicking outside of the save slot cancels the selection
    // allow dragging to select levels
    if(hold_pressed)
    {
        hold_counter++;
        if(hold_counter &gt;= hold_threshold)
        {
            hold_counter = hold_threshold;
            drag_x = device_mouse_x_to_gui(0);
            drag_y = device_mouse_y_to_gui(0);
            
            if(snap_timer == 0)
            {
                if(drag_y &lt; press_y - 60)
                {
                    // dragging upwards
                    with objSaveControl {
                        with slots[selectCheck] {
                            if lastFutureLevel &gt; iconIndex || lastPastLevel &gt; iconIndex
                                iconIndex += 1;
                            if iconIndex &gt; lastIndex {
                                iconIndex = 0;
                            }
                            if pastLevels[iconIndex] == true {
                                visiblePast = 1;
                            }
                            else
                                visiblePast = 0;
            
                            if futureLevels[iconIndex] == true {
                                visibleFuture = 1;
                            }
                            else if futureLevels[iconIndex] == false visibleFuture = 0;
                        }
                    }
                    press_y = press_y - 60;
                }
                if(drag_y &gt; press_y + 60)
                {
                    // dragging downwards
                    with objSaveControl {
                        with slots[selectCheck] {
                            if iconIndex &gt; 0
                                iconIndex -= 1;
                            if iconIndex &lt; 0 {
                                iconIndex = lastIndex;
                            }
                            if pastLevels[iconIndex] == true {
                                visiblePast = 1;
                            }
                            else
                                visiblePast = 0;
            
                            if futureLevels[iconIndex] == true {
                                visibleFuture = 1;
                            }
                            else if futureLevels[iconIndex] == false visibleFuture = 0;
                        }
                    }
                    press_y = press_y + 60;
                }
            }
        }
    }
    if(device_mouse_check_button_released(0, mb_left))
    {
        // if the button is released before the drag threshold has passed - act as a click
        if(hold_counter &lt; hold_threshold)
        {
            var relativeClickX = 0;
            var relativeClickY = 0;
            var clickedOnSlot = 0;
            var doClick = false;
            if(point_in_rectangle(
                device_mouse_x(0), device_mouse_y(0),
                objSaveControl.bbox_left,
                objSaveControl.bbox_top,
                objSaveControl.bbox_right,
                objSaveControl.bbox_bottom
            ))
            {
                // clicked on a selected slot or delete operation
                doClick = true;
                clickedOnSlot = objSaveControl.selectCheck;
                var sslot = objSaveControl.slots[objSaveControl.selectCheck];
                relativeClickX = device_mouse_x(0) - sslot.bbox_left;
                relativeClickY = device_mouse_y(0) - sslot.bbox_top;
            }
            else
            {
                var sslot = instance_position(device_mouse_x(0),device_mouse_y(0), objSaveSlot );
                if(sslot != noone)
                {
                    doClick = true;
                    if(objSaveControl.selectCheck != sslot.slotNumber)
                    {
                        clickedOnSlot = sslot.slotNumber;
                    }
                    relativeClickX = device_mouse_x(0) - sslot.bbox_left;
                    relativeClickY = device_mouse_y(0) - sslot.bbox_top;
                }
                else
                {
                    sslot = instance_position(device_mouse_x(0),device_mouse_y(0), objDeleteSlot );
                    if(sslot != noone)
                    {
                        doClick = true;
                        if(objSaveControl.selectCheck != 8)
                        {
                            clickedOnSlot = 8;
                        }
                        relativeClickX = device_mouse_x(0) - sslot.bbox_left;
                        relativeClickY = device_mouse_y(0) - sslot.bbox_top;
                    }
                }
            }
            if(doClick)
            {
                // clicked on the same slot - start playing
                // clicked on a different slot - cancel
                if(objSaveControl.selectCheck == clickedOnSlot)
                {
                    // game starts on second click on the same time period or elsewhere on the save file
                    var doStart = false;
                    if(relativeClickY &lt; 80)
                    {
                        var clickedLeftRight = 0;
                        // clicked on a time period
                        // if case of final levels - the period is assumed to be the future no matter where the click is
                        if(relativeClickX &gt; 45 || objSaveControl.slots[objSaveControl.selectCheck].iconIndex &gt; 11)
                        {
                            clickedLeftRight = 1;
                        }
                        if(objSaveControl.stageLeftRight == clickedLeftRight)
                        {
                            // clicked on an already selected time period
                            doStart = true;
                        }
                        else
                        {
                            // clicked on a different time period
                            if(clickedLeftRight == 0)
                            {
                                with(objSaveControl)
                                {
                                    with slots[selectCheck]
                                    {
                                        if(visiblePast==1)
                                        {
                                            stageLeftRight=0;
                                            objSaveControl.stageLeftRight=0;
                                        }
                                    }
                                }
                            }
                            else
                            {
                                with(objSaveControl)
                                {
                                    with slots[selectCheck]
                                    {
                                        if(visibleFuture==1)
                                        {
                                            stageLeftRight=1;
                                            objSaveControl.stageLeftRight=1;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        // clicked elsewhere on the save file
                        doStart = true;
                    }
                    
                    if(doStart)
                    {
                        with(objSaveControl)
                        {
                            with slots[selectCheck] {
                
                                if visiblePast==1 {
                                        stageLeftRight=0;
                                    }
                                    if visibleFuture==1 {
                                        stageLeftRight=1;
                                    }
                                if (other.stageLeftRight == 1 &amp;&amp; visibleFuture == 1) or (other.stageLeftRight == 0 &amp;&amp; visiblePast == 1) {
                                    if other.stageLeftRight == 0
                                    objProgram.in_past = true;
                                    else objProgram.in_past = false;
                    
                                    objGameData.character_id[0] = characterSelect;
                                    objProgram.saveSlot=other.selectCheck;
                                    save_file_name(slotNumber);
                                    load_emeralds();
                                    load_lives();
                                    if iconIndex &gt; 0 {
                                        level_goto_from_save(iconIndex + 1)
                                    }
                                    else {
                                        level_goto_from_save(iconIndex)
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    objSaveControl.selectState = 0;
                }
            }
        }
        hold_pressed = false;
    }
}
else
if(objSaveControl.selectState == 2)
{
    // in this state, sliding vertically allows to select a character
    // clicking outside of the save slot cancels the selection

    // allow dragging to select characters
    if(hold_pressed)
    {
        hold_counter++;
        if(hold_counter &gt;= hold_threshold)
        {
            hold_counter = hold_threshold;
            drag_x = device_mouse_x_to_gui(0);
            drag_y = device_mouse_y_to_gui(0);
            
            if(snap_timer == 0)
            {
                if(drag_y &lt; press_y - 60)
                {
                    // dragging upwards
                    with objSaveControl {
                        with slots[selectCheck] {
                            characterSelect += 1;
                            if characterSelect &gt; 3 {
                                characterSelect = 1;
                            }
                        }
                    }
                    press_y = press_y - 60;
                }
                if(drag_y &gt; press_y + 60)
                {
                    // dragging downwards
                    with objSaveControl {
                        with slots[selectCheck] {
                            characterSelect -= 1;
                            if characterSelect &lt; 1 {
                                characterSelect = 3;
                            }
                        }
                    }
                    press_y = press_y + 60;
                }
            }
        }
    }
    if(device_mouse_check_button_released(0, mb_left))
    {
        // if the button is released before the drag threshold has passed - act as a click
        if(hold_counter &lt; hold_threshold)
        {
            var clickedOnSlot = 0;
            var doClick = false;
            if(point_in_rectangle(
                device_mouse_x(0), device_mouse_y(0),
                objSaveControl.bbox_left,
                objSaveControl.bbox_top,
                objSaveControl.bbox_right,
                objSaveControl.bbox_bottom
            ))
            {
                // clicked on a selected slot or delete operation
                doClick = true;
                clickedOnSlot = objSaveControl.selectCheck;
            }
            else
            {
                var sslot = instance_position(device_mouse_x(0),device_mouse_y(0), objSaveSlot );
                if(sslot != noone)
                {
                    doClick = true;
                    if(objSaveControl.selectCheck != sslot.slotNumber)
                    {
                        clickedOnSlot = sslot.slotNumber;
                    }
                }
                else
                {
                    sslot = instance_position(device_mouse_x(0),device_mouse_y(0), objDeleteSlot );
                    if(sslot != noone)
                    {
                        doClick = true;
                        if(objSaveControl.selectCheck != 8)
                        {
                            clickedOnSlot = 8;
                        }
                    }
                }
            }
            if(doClick)
            {
                // clicked on the same slot - create a save file
                // if we're on a no save slot, start playing
                // clicked on a different slot - cancel
                if(objSaveControl.selectCheck == clickedOnSlot)
                {
                    with(objSaveControl)
                    {
                        create_new_save(slots[selectCheck].characterSelect, selectCheck);
                        slots[selectCheck].futureLevels[0]=true;
                        slots[selectCheck].allowLevelStart =false;
                        slots[selectCheck].visibleFuture=1;
                        if(selectCheck &gt; 0)
                        {
                            selectState = 1;
                        }
                        else
                        {
                            objProgram.saveSlot=other.selectCheck;
                            objProgram.in_past = false;
                            objGameData.character_id[0] = slots[selectCheck].characterSelect;
                            load_emeralds();
                            load_lives();
                            level_goto_from_save(0);
                        }
                    }
                }
                else
                {
                    objSaveControl.selectState = 0;
                }
            }
        }
        hold_pressed = false;
    }
}
else
if(objSaveControl.selectState == 3)
{
    // in this state, clicking on a save slot deletes it
    // clicking outside of the save slot cancels the selection
    if(device_mouse_check_button_released(0, mb_left))
    {
        // if the button is released before the drag threshold has passed - act as a click
        if(hold_counter &lt; hold_threshold)
        {
            var clickedOnSlot = 0;
            var doClick = false;
            if(point_in_rectangle(
                device_mouse_x(0), device_mouse_y(0),
                objSaveControl.bbox_left,
                objSaveControl.bbox_top,
                objSaveControl.bbox_right,
                objSaveControl.bbox_bottom
            ))
            {
                // clicked on a selected slot or delete operation
                doClick = true;
                clickedOnSlot = objSaveControl.selectCheck;
            }
            else
            {
                var sslot = instance_position(device_mouse_x(0),device_mouse_y(0), objSaveSlot );
                if(sslot != noone)
                {
                    doClick = true;
                    if(objSaveControl.selectCheck != sslot.slotNumber)
                    {
                        clickedOnSlot = sslot.slotNumber;
                    }
                }
                else
                {
                    sslot = instance_position(device_mouse_x(0),device_mouse_y(0), objDeleteSlot );
                    if(sslot != noone)
                    {
                        doClick = true;
                        if(objSaveControl.selectCheck != 8)
                        {
                            clickedOnSlot = 8;
                        }
                    }
                }
            }
            if(doClick)
            {
                // clicked on the same slot - start playing
                // clicked on a different slot - cancel
                if(objSaveControl.selectCheck == clickedOnSlot)
                {
                    with(objSaveControl)
                    {
                        var filename = save_file_name(selectCheck);
                        slots[selectCheck].visiblePast=0;
                        slots[selectCheck].visibleFuture=0;
                        eas_file_delete(filename);
                        selectState = 0;
                        slots[selectCheck].iconIndex = 0;
                        slots[selectCheck].characterSelect=1;
                        slots[selectCheck].alarm[0] = 1;
                        slots[selectCheck].lastFutureLevel = 0;
                        slots[selectCheck].lastPastLevel = 0;
                        sprite_index = sprSaveControl;
                    }
                }
                else
                {
                    objSaveControl.selectState = 0;
                }
            }
        }
        hold_pressed = false;
    }
}
else
{
    // just in case :)
    if(device_mouse_check_button_released(0, mb_left))
    {
        hold_pressed = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw_text(100, 0, string(device_mouse_x_to_gui(0))+';'+string(device_mouse_y_to_gui(0)));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
