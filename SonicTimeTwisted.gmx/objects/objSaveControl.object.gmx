<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprSaveControl</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objInputMethodDependant</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Inherit event
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize objects for the screen and read saved data
// Play Save Screen music
set_zone_music(room);
play_music_intro(objMusic.musicIntroAsset, 0);
// Create Objects and Variables
slots[0]=instance_create(64,120,objNoSaveSlot);
slots[1]=instance_create(192,120,objSaveSlot);
slots[2]=instance_create(320,120,objSaveSlot);
slots[3]=instance_create(448,120,objSaveSlot);
slots[4]=instance_create(576,120,objSaveSlot);
slots[5]=instance_create(704,120,objSaveSlot);
slots[6]=instance_create(832,120,objSaveSlot);
slots[7]=instance_create(960,120,objSaveSlot);
slots[8]=instance_create(1088,120,objDeleteSlot);
slots[0].slotNumber = -1;
slots[1].slotNumber = 0;
slots[2].slotNumber = 1;
slots[3].slotNumber = 2;
slots[4].slotNumber = 3;
slots[5].slotNumber = 4;
slots[6].slotNumber = 5;
slots[7].slotNumber = 6;
slots[8].slotNumber = 7;

// this is needed for touchscreens
slots[0].position = 0;
slots[1].position = 1;
slots[2].position = 2;
slots[3].position = 3;
slots[4].position = 4;
slots[5].position = 5;
slots[6].position = 6;
slots[7].position = 7;
slots[8].position = 8;

xSpeed=0;
selectCheck = 1;
x=slots[1].x;
y=slots[1].y;
selectState = 0;
// left = 0 right = 1
stageLeftRight = 1;
stageDeleteConfirmSprite = sprDeleteConfirm;
flash_visibility = true;
flash_alpha = 1;
flash_counter = 0;

// some touchscreen variables
mouse_prev_x = 0;
mouse_prev_y = 0;
mouse_dx = 0;
mouse_dy = 0;
x_on_press = x;
y_on_press = y;
tap_registered = false;
drag_registered = false;
y_drag = 0;
hint_top = "";
hint_bottom = "";
if(is_touchscreen)
{
    view_object[0] = noone;
    // hints update
    event_user(3);
}
hint_surface = -1;
hint_up_to_date = false;

if(objScreen.flashing_reduced)
{
    flash_update_event = 6;
    slot_draw_event = 7;
}
else
{
    flash_update_event = 4;
    slot_draw_event = 5;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Clean up
if (surface_exists(hint_surface)) surface_free(hint_surface);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///States reference
/*

(reworked to include two touchscreen-specific states and no longer rely on a sprite_index)

0 - selecting a slot
1 - selecting an act in an existing save
2 - selecting a character for a new game
3 - centering camera on delete slot (touchscreen-specific)
4 - selecting a slot to delete
5 - confirming save slot deletion
6 - centering camera on slot to delete (touchscreen-specific)
7 - centering camera before cancelling delete mode (touchscreen-specific)

*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Manage returning to the title screen
// This needs to be at the beginning, so that input_check_pressed() doesn't trigger
// while returning to state 0
if(selectState == 0)
{
    var cancel = false;
    if(input_check_pressed(cCANCEL))
    {
        cancel = true;
    }
    if(is_touchscreen)
    {
        if(mouse_check_button_pressed(mb_left))
        {
            cancel =  point_in_rectangle(device_mouse_x(0), device_mouse_y(0), 
                view_xview[0] + view_wview[0] - 28, view_yview[0] + 4,
                view_xview[0] + view_wview[0] - 4, view_yview[0] + 28);
        }
    }
    if(cancel)
    {
        // at this point, the options have obviously been saved at least once
        objProgram.first_run = false;
        
        transition_to(objFadeWhiteFromSaveToTitle, titlescreen, 24);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Switch input (if applies)
var prev_is_touchscreen = is_touchscreen;
script_execute(switch_script);
if(is_touchscreen != prev_is_touchscreen)
{
    if(is_touchscreen)
    {
        view_object[0] = noone;
        view_hspeed[0] = -1;
    }
    else
    {
        view_object[0] = objSaveControl;
        view_hspeed[0] = 64;
    }
    // hints update
    event_user(3);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>408</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>!is_touchscreen</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Clear message
hint_top = "";
hint_bottom = "";
hint_up_to_date = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Horizontal Movement
view_object[0] = self;
view_hspeed[0] = -1;
if selectState == 0 || selectState == 4 {
    if (selectState == 0 &amp;&amp; selectCheck &gt; 0) ||
        (selectState == 4 &amp;&amp; selectCheck &gt; 1)
      {
        if input_check_pressed(cLEFT) {
            xSpeed=-1;
            selectCheck -=1;
            play_sfx(sndBeep,10);
        }
    }
    
    if selectCheck &lt; 8 {
        if input_check_pressed(cRIGHT) {
            xSpeed=1;
            selectCheck +=1;
            play_sfx(sndBeep,10);
        }
    }
}
else if selectState == 1 {
    if input_check_pressed(cLEFT) &amp;&amp; slots[selectCheck].visiblePast==1 {
        stageLeftRight=0;
    }
    if input_check_pressed(cRIGHT) &amp;&amp; slots[selectCheck].visibleFuture==1 {
        stageLeftRight=1;
    }
}
else if selectState == 5 {    
    if input_check_pressed(cLEFT) {
        // Delete slot - same code handles button press &amp; smartphone click
        event_user(2);
        sprite_index = sprSaveControl;
        play_sfx(sndHurt, 0);
        selectState = 0;
        
    }
    if input_check_pressed(cRIGHT) {
        sprite_index = sprSaveControl;
        play_sfx(sndCancel, 0);
        selectState =0;    
    
    }   
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Selector Movement
if x &lt;&gt; slots[selectCheck].x {    
    if(xSpeed == 1)
        x += 16;
    if(xSpeed == -1)
        x -= 16;
} else {
    xSpeed=0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Vertical Controls and Actions
if xSpeed == 0 {
    if selectState == 0 || selectState == 4 {
        if input_check_pressed(cA) || input_check_pressed(cSTART) {
            // same code handles button press &amp; smartphone click
            event_user(0);
        }
    }
    if selectState == 1 {
        with slots[selectCheck] {
            if input_check_pressed(cUP) {
                if lastFutureLevel &gt; iconIndex || lastPastLevel &gt; iconIndex
                    iconIndex += 1;
            }
            if input_check_pressed(cDOWN) {
                if iconIndex &gt; 0
                    iconIndex -= 1;
            }
            if input_check_pressed(cB) {
                other.selectState = 0;
                allowLevelStart = false;
                play_sfx(sndCancel, 0);
            }
            if input_check_released(cA) || input_check_pressed(cSTART) {
                allowLevelStart = true;
            }
            if (input_check_pressed(cA) || input_check_pressed(cSTART)) &amp;&amp; allowLevelStart == true {
                if input_check_pressed(cLEFT) &amp;&amp; slots[selectCheck].visiblePast==1 {
                    stageLeftRight=0;
                }
                if input_check_pressed(cRIGHT) &amp;&amp; slots[selectCheck].visibleFuture==1 {
                    stageLeftRight=1;
                }
                event_user(0);
            }
            if iconIndex &lt; 0 {
                iconIndex = lastIndex;
            } else if iconIndex &gt; lastIndex {
                iconIndex = 0;
            }
            if input_check_pressed(cUP) || input_check_pressed(cDOWN) {
                if pastLevels[iconIndex] == true {
                    visiblePast = 1;
                }
                else
                    visiblePast = 0;
                if futureLevels[iconIndex] == true {
                    visibleFuture = 1;
                }
                else if futureLevels[iconIndex] == false visibleFuture = 0;
            }
        }
    }
    if selectState == 2 {
        with slots[selectCheck] {
            if input_check_pressed(cUP) {
                characterSelect += 1;
            }
            if input_check_pressed(cDOWN) {
                characterSelect -= 1;
            }
            if characterSelect &gt; CHARS_COUNT {
                characterSelect = 1;
            } else if characterSelect &lt; 1 {
                characterSelect = CHARS_COUNT;
            }
            if input_check_released(cA) || input_check_pressed(cSTART) {
                allowLevelStart = true;
            }
            if input_check_pressed(cB) {
                other.selectState = 0;
            }
        }
        
        if (input_check_pressed(cA) || input_check_pressed(cSTART)) &amp;&amp; slots[selectCheck].allowLevelStart == true {
            // start new game - same code handles button press &amp; smartphone click
            event_user(1);
        }
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>408</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>is_touchscreen</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Detect &amp; distinguish press or drag
if(mouse_check_button_pressed(mb_left))
{
    mouse_prev_x = mouse_x - view_xview[0];
    mouse_prev_y = mouse_y - view_yview[0];
    mouse_dx = 0;
    mouse_dy = 0;
    mouse_click_registered = false;
    x_on_press = mouse_x + view_xview[0];
    y_on_press = mouse_y;
    
}
if(mouse_check_button(mb_left))
{
    mouse_dx = mouse_x - view_xview[0] - mouse_prev_x;
    mouse_dy = mouse_y - view_yview[0] - mouse_prev_y;
    mouse_prev_x = mouse_x - view_xview[0];
    mouse_prev_y = mouse_y - view_yview[0];
}
tap_registered = false;
drag_registered = false;
if(mouse_check_button_released(mb_left))
{
    switch(selectState)
    {
        case 0:
        case 4:
        case 5:
            // selecting a slot
            // within 2 pixels is considered a touch
            if(abs(mouse_x + view_xview[0] - x_on_press) &lt;= 2)
            {
                tap_registered = true;
            }
            // else the screen was dragged, let's not do anything
            mouse_dx = 0;
            mouse_dy = 0;
            break;
        case 1:
        case 2:
            // selecting a character for a new game or a zone via vertical dragging
            // within 2 pixels is considered a touch
            if (abs(y_on_press - mouse_y) &lt;= 2)
            {
                tap_registered = true;
            }
            else
            {
                y_drag = mouse_y - y_on_press;
                drag_registered = true;
            }
            break;
    }

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Recenter camera

// simply setting the view_object is not enough because we'll have to deal
// with room bounds
if(selectState == 1 || selectState == 2 || selectState == 3 || selectState == 6 || selectState == 7)
{
    var diff_center = (view_xview[0] + (view_wview[0] div 2)) - x;
    if(diff_center != 0)
    {
        if(diff_center &lt;= -16)
        {
            view_xview[0] += 16;
        }
        else
        {
            if((diff_center &gt; -16 &amp;&amp; diff_center &lt;= 0) || (diff_center &lt; 16 &amp;&amp; diff_center &gt;= 0))
            {
                view_xview[0] = x - (view_wview[0] div 2);
                if(selectState == 3)
                {
                    selectState = 4;
                }
                if(selectState == 6)
                {
                    selectState = 5;
                }
                if(selectState == 7)
                {
                    selectState = 0;
                }
            }
            else
            {
                if(diff_center &gt;= 16)
                {
                    view_xview[0] -= 16;
                }
            }
        }
    }
    else
    {
        view_xview[0] = x - (view_wview[0] div 2);
        if(selectState == 3)
        {
            selectState = 4;
        }
        if(selectState == 6)
        {
            selectState = 5;
        }
        if(selectState == 7)
        {
            selectState = 0;
        }
    }
}
/*
view_object[0] = self;
view_hspeed[0] = 24;
*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>selectState</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>1</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// select act
if(drag_registered)
{
    if (y_drag &lt; -8)
    {
        with slots[selectCheck] {
            if lastFutureLevel &gt; iconIndex || lastPastLevel &gt; iconIndex
                iconIndex += 1;
        }
    }
    if (y_drag &gt; 8)
    {
        with slots[selectCheck] {
            if iconIndex &gt; 0
                iconIndex -= 1;
        }
    }
    with slots[selectCheck] {
        if iconIndex &lt; 0 {
            iconIndex = lastIndex;
        } else if iconIndex &gt; lastIndex {
            iconIndex = 0;
        }
    }
    if(abs(y_drag) &gt; 8)
    {
        with slots[selectCheck] {
            if pastLevels[iconIndex] == true {
                visiblePast = 1;
            }
            else
                visiblePast = 0;
            if futureLevels[iconIndex] == true {
                visibleFuture = 1;
            }
            else if futureLevels[iconIndex] == false visibleFuture = 0;
        }
    }
}

var cancelled = false;
if(tap_registered)
{
    if(point_in_rectangle(mouse_x, mouse_y,
        slots[selectCheck].bbox_left, slots[selectCheck].bbox_top,
        slots[selectCheck].bbox_right, slots[selectCheck].bbox_bottom))
    {
        // depending on where the click is and what can be selected,
        // start the game or change the time period
        
        with slots[selectCheck] {
            // the check is only done if both past and future can be displayed
            // also, tapping an already selected time period starts the game
            var do_start = true;
            if (mouse_y &lt;= bbox_top + 65)
            {
                if(visiblePast &amp;&amp; visibleFuture)
                {
                    if(mouse_x &lt; x &amp;&amp; other.stageLeftRight == 1)
                    {
                        other.stageLeftRight = 0;
                        do_start = false;
                    }
                    else
                    {
                        if(mouse_x &gt;= x &amp;&amp; other.stageLeftRight == 0)
                        {
                            other.stageLeftRight = 1;
                            do_start = false;
                        }
                    }
                }
            }
            if(do_start)
            {
                event_user(0);
            }
        }
    }
    else
    {
        cancelled = true;
    }
}
else
{
    if(keyboard_check_released(DEVICE_BACK_BUTTON))
    {
        cancelled = true;
    }
}
if(cancelled)
{
    selectState = 0;
    slots[selectCheck].allowLevelStart = false;
    // Hints update
    event_user(3);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>421</id>
        <kind>3</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>selectState</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>2</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// select character
if(drag_registered)
{
    if (y_drag &lt; -8)
    {        
        with slots[selectCheck] {
            characterSelect += 1;
            if(characterSelect &gt; CHARS_COUNT)
            {
                characterSelect = 1;
            }
            play_sfx(sndBeep, 0);
        }
    }
    if (y_drag &gt; 8)
    {
        with slots[selectCheck] {
            characterSelect -= 1;
            if(characterSelect &lt; 1)
            {
                characterSelect = CHARS_COUNT;
            }
            play_sfx(sndBeep, 0);
        }
    }
}


/// confirm or cancel
var cancelled = false;
if(tap_registered)
{
    if(point_in_rectangle(mouse_x, mouse_y,
        slots[selectCheck].bbox_left, slots[selectCheck].bbox_top,
        slots[selectCheck].bbox_right, slots[selectCheck].bbox_bottom))
    {
        // create new save file - same code handles button press &amp; smartphone click
        event_user(1);
        play_sfx(sndBeep, 0);
    }
    else
    {
        cancelled = true;
    }
}
else
{
    if(keyboard_check_released(DEVICE_BACK_BUTTON))
    {
        cancelled = true;
    }
}
if(cancelled)
{
    play_sfx(sndCancel, 0);
    selectState = 0;
    slots[selectCheck].allowLevelStart = false;
    // Hints update
    event_user(3);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>421</id>
        <kind>3</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>selectState</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>5</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Manage clicks
if(tap_registered)
{

    if(point_in_rectangle(mouse_x, mouse_y,
        slots[selectCheck].bbox_left, slots[selectCheck].bbox_top,
        slots[selectCheck].bbox_right, slots[selectCheck].bbox_bottom))
    {
        event_user(2);
        sprite_index = sprSaveControl;
        play_sfx(sndHurt, 0);
        selectState = 0;
        // Hints update
        event_user(3);
    }
    else
    {
        play_sfx(sndCancel, 0);
        sprite_index = sprSaveControl;
        selectState = 0;
        // Hints update
        event_user(3);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>421</id>
        <kind>3</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>408</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>selectState == 0 || selectState == 4</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Selecting a slot</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Drag camera
view_object[0] = noone;
view_xview[0] = max(
    slots[0].x  - (view_wview[0] div 2),
    min(
        view_xview[0] - mouse_dx,
        slots[8].x  - (view_wview[8] div 2),
    )
);
if(selectState == 4 || selectState == 6)
{
    x = view_xview[0] + (view_wview[0] div 2);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Manage clicks
if(tap_registered)
{
    var clicked_on = instance_position(mouse_x, mouse_y, objSaveSlot);
    if(clicked_on != noone)
    {
        play_sfx(sndBeep, 0);
        selectCheck = clicked_on.position;
        x = clicked_on.x;
        event_user(0);
    }
    else
    {
        clicked_on = instance_position(mouse_x, mouse_y, objNoSaveSlot);
        if(clicked_on != noone)
        {
            play_sfx(sndBeep, 0);
            selectCheck = clicked_on.position;
            x = clicked_on.x;
            event_user(0);
        }
        else
        {
            clicked_on = instance_position(mouse_x, mouse_y, objDeleteSlot);
            if(clicked_on != noone)
            {
                play_sfx(sndBeep, 0);
                selectCheck = clicked_on.position;
                x = clicked_on.x;
                event_user(0);
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Done processing
mouse_click_registered = false;
mouse_drag_registered = false;
mouse_dx = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// visibility flash
event_user(flash_update_event);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw slots - with flash reduction

if selectState==0 || selectState==4 {
    if (sprite_index == sprSaveDelete)
    {
        draw_sprite_ext(sprite_index,0,x,y,image_xscale,image_yscale,0,c_white,0.4 + (flash_alpha/2));
        draw_set_font(objResources.fontHud);
        draw_set_halign(fa_center);
        draw_set_valign(fa_middle);
        draw_text_colour(x, y - 10, tr("_save_delete"), c_red, c_red, c_white, c_white, 0.4 + (flash_alpha/2));
        draw_set_halign(fa_left);
        draw_set_valign(fa_top);
    }
    else
    {
        draw_sprite_ext(sprite_index,0,x,y,image_xscale,image_yscale,0,c_white,flash_alpha);
    }
}
else if selectState==1{
if slots[selectCheck].iconIndex &gt; 11
    draw_sprite_ext(sprSelectStage,2,x,y-44,image_xscale,image_yscale,0,c_white,flash_alpha);
    else
    {
        draw_sprite_ext(sprSelectStage,stageLeftRight,x,y-44,image_xscale,image_yscale,0,c_white,0.3 + (flash_alpha/2));
        draw_sprite_ext(sprSelectStageFade,stageLeftRight,x,y-44,image_xscale,image_yscale,0,c_white,0.5);
    }
}
if selectState ==2 {
    if(selectCheck == 0)
    {
        draw_sprite_ext(sprCharSelect,0,x,y+24,1,1,0,c_white,flash_alpha);
    }
    else
    {
        draw_sprite_ext(sprCharSelect,0,x,y+32,1,1,0,c_white,flash_alpha);
    }
}
if selectState==5 {
    draw_sprite_ext(stageDeleteConfirmSprite,0,x,y,image_xscale,image_yscale,0,c_white,1);
    draw_set_font(objResources.fontHud);
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    draw_text_colour(x, y - 10, tr("_save_delete"), c_red, c_red, c_white, c_white, 1);
    if (stageDeleteConfirmSprite == sprDeleteConfirm)
        draw_text_colour(x, y + 10, tr("_save_delete_YesNo"), c_red, c_red, c_white, c_white, 1);
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="16">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Flash update - with flash reduction
if (is_touchscreen &amp;&amp; selectState == 0 &amp;&amp; sprite_index == sprSaveControl) {
    flash_visibility = false;
    flash_alpha = 0;
}
else
if selectState!=5 {
    flash_counter = (flash_counter + 1) mod 8;
    flash_alpha = 1;
    if(flash_counter == 4 || flash_counter == 1)
    {
        flash_alpha = 0.2;        
    }
    else
    {
        if(flash_counter == 5 || flash_counter == 0)
        {
            flash_alpha = 0.4;        
        }
        else
        {
            if(flash_counter &gt; 5)
            {
                flash_alpha = 0.6;
            }
            else
            {
                flash_alpha = 0;        
            }
        }
    }
    flash_visibility = flash_alpha &gt; 0;
} else flash_visibility=true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="15">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw slots - without flash reduction
if(flash_visibility)
{
    if selectState==0 || selectState==4 {
        draw_sprite_ext(sprite_index,0,x,y,image_xscale,image_yscale,0,c_white,1);
        if (sprite_index == sprSaveDelete)
        {
            draw_set_font(objResources.fontHud);
            draw_set_halign(fa_center);
            draw_set_valign(fa_middle);
            draw_text_colour(x, y - 10, tr("_save_delete"), c_red, c_red, c_white, c_white, 1);
            draw_set_halign(fa_left);
            draw_set_valign(fa_top);
        }
    }
    else if selectState==1{
    if slots[selectCheck].iconIndex &gt; 11
        draw_sprite_ext(sprSelectStage,2,x,y-44,image_xscale,image_yscale,0,c_white,1);
        else draw_sprite_ext(sprSelectStage,stageLeftRight,x,y-44,image_xscale,image_yscale,0,c_white,1);
    }
    if selectState ==2 {
        if(selectCheck == 0)
        {
            draw_sprite_ext(sprCharSelect,0,x,y+24,1,1,0,c_white,1);
        }
        else
        {
            draw_sprite_ext(sprCharSelect,0,x,y+32,1,1,0,c_white,1);
        }
    }
    if selectState==5 {
        draw_sprite_ext(stageDeleteConfirmSprite,0,x,y,image_xscale,image_yscale,0,c_white,1);
        draw_set_font(objResources.fontHud);
        draw_set_halign(fa_center);
        draw_set_valign(fa_middle);
        draw_text_colour(x, y - 10, tr("_save_delete"), c_red, c_red, c_white, c_white, 1);
        if (stageDeleteConfirmSprite == sprDeleteConfirm)
            draw_text_colour(x, y + 10, tr("_save_delete_YesNo"), c_red, c_red, c_white, c_white, 1);
        draw_set_halign(fa_left);
        draw_set_valign(fa_top);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Flash update - without flash reduction
if (is_touchscreen &amp;&amp; selectState == 0 &amp;&amp; sprite_index == sprSaveControl) {
    flash_visibility = false;
}
else
if selectState!=5 &amp;&amp; objScreen.frame_counter {
    flash_visibility = !flash_visibility;
} else flash_visibility=true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Touchscreen hints update
hint_top = "";
hint_bottom = "";
if(is_touchscreen)
{
    switch(selectState)
    {
        case 0:
        case 7:
            hint_top = tr("_save_mobile_hint_select");
            break;
        case 1:
            hint_top = tr("_save_mobile_hint_act_select_top");
            hint_bottom = tr("_save_mobile_hint_act_select_bottom");
            break;
        case 2:
            hint_top = tr("_save_mobile_hint_character_select_top");
            hint_bottom = tr("_save_mobile_hint_character_select_bottom");
            break;
        case 3:
        case 4:
            hint_top = tr("_save_mobile_hint_delete_top");
            hint_bottom = tr("_save_mobile_hint_delete_bottom");
            break;
        case 5:
        case 6:
            hint_top = tr("_save_mobile_hint_delete_confirm_top");
            hint_bottom = tr("_save_mobile_hint_delete_confirm_bottom");
            break;
    }
}
hint_up_to_date = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Delete a slot
var filename = save_file_name(slots[selectCheck].slotNumber);
slots[selectCheck].visiblePast=0;
slots[selectCheck].visibleFuture=0;
stt_file_delete(filename);
stt_save_files();
slots[selectCheck].iconIndex = 0;
slots[selectCheck].characterSelect=1;
slots[selectCheck].alarm[0] = 1;
slots[selectCheck].lastFutureLevel = 0;
slots[selectCheck].lastPastLevel = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create save or start a no-save game

objProgram.saveSlot = slots[selectCheck].slotNumber;
create_new_save(slots[selectCheck].characterSelect, slots[selectCheck].slotNumber);
slots[selectCheck].futureLevels[0]=true;
slots[selectCheck].allowLevelStart =false;
slots[selectCheck].visibleFuture=1;
slots[selectCheck].visiblePast=0;
if(slots[selectCheck].slotNumber &gt;= 0)
{
    selectState = 1;
    stageLeftRight = 1;
    // Hints update
    event_user(3);
}
else
{
    // if it's a no save slot, the game immediately starts
    objProgram.in_past = false;
    objProgram.special_future_current_level = 0;
    objProgram.special_past_current_level = 0;
    objGameData.character_id[0] = slots[selectCheck].characterSelect;
    load_emeralds();
    load_lives();
    level_goto_from_save(0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Select slot
if selectCheck != 8 {
if selectState == 4 {

    if(is_touchscreen)
    {
        // Recenter camera before delete confirmation
        stageDeleteConfirmSprite = sprDeleteConfirmTouchscreen;
        selectState = 6;
        // Hints update
        event_user(3);
    }
    else
    {
        // Delete confirmation
        stageDeleteConfirmSprite = sprDeleteConfirm;
        selectState = 5;
        // Hints update
        event_user(3);
    }

} else {
        var filename = save_file_name(slots[selectCheck].slotNumber);
        if !stt_file_exists(filename) {
            selectState = 2;
            allowLevelStart = false;
            
            // Hints update
            event_user(3);
        } else {
            selectState = 1;
            // Hints update
            event_user(3);
            // if only one time period is available, switch to it
            if ((!slots[selectCheck].visibleFuture) &amp;&amp; (slots[selectCheck].visiblePast) &amp;&amp; stageLeftRight == 1)
            {
                stageLeftRight = 0;
            }
            else
            {
                if ((!slots[selectCheck].visiblePast) &amp;&amp; (slots[selectCheck].visibleFuture) &amp;&amp; stageLeftRight == 0)
                {
                    stageLeftRight = 1;
                }
            }
        }
    }
    
    } else if selectState == 0{

        if(is_touchscreen)
        {
            // Recenter camera before delete mode
            selectState = 3;
        }
        else
        {
            // Delete mode
            selectState = 4;
        }
        // Hints update
        event_user(3);
        sprite_index=sprSaveDelete;
        image_speed=.25;
    
    } else {
        if(is_touchscreen)
        {
            // Recenter camera before leaving delete mode
            selectState = 7;
        }
        else
        {
            selectState = 0;
        }
        // Hints update
        event_user(3);
        sprite_index=sprSaveControl;
        image_speed=0;
    
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Clean up
if (surface_exists(hint_surface)) surface_free(hint_surface);
stop_all_music(false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if((!hint_up_to_date) || (!surface_exists(hint_surface)))
{
    if(!surface_exists(hint_surface))
    {
        hint_surface = surface_create(512, 512);
    }
    surface_set_target(hint_surface);
    draw_clear_alpha(c_black, 0);
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    draw_set_font(objResources.fontMicro);
    
    if(hint_top != "")
    {
        draw_set_color(c_black);
        draw_text(view_wview[0] div 2 - 1, 14, hint_top);
        draw_text(view_wview[0] div 2 + 1, 14, hint_top);
        draw_text(view_wview[0] div 2, 14 - 1, hint_top);
        draw_text(view_wview[0] div 2, 14 + 1, hint_top);
        draw_text(view_wview[0] div 2 - 1, 14 - 1, hint_top);
        draw_text(view_wview[0] div 2 - 1, 14 + 1, hint_top);
        draw_text(view_wview[0] div 2 + 1, 14 - 1, hint_top);
        draw_text(view_wview[0] div 2 + 1, 14 + 1, hint_top);
        draw_set_color(c_white);
        draw_text(view_wview[0] div 2, 14, hint_top);
    }
    if(hint_bottom != "")
    {
        draw_set_color(c_black);
        draw_text(view_wview[0] div 2 - 1, view_hview[0] - 18, hint_bottom);
        draw_text(view_wview[0] div 2 + 1, view_hview[0] - 18, hint_bottom);
        draw_text(view_wview[0] div 2, view_hview[0] - 18 - 1, hint_bottom);
        draw_text(view_wview[0] div 2, view_hview[0] - 18 + 1, hint_bottom);
        draw_text(view_wview[0] div 2 - 1, view_hview[0] - 18 - 1, hint_bottom);
        draw_text(view_wview[0] div 2 - 1, view_hview[0] - 18 + 1, hint_bottom);
        draw_text(view_wview[0] div 2 + 1, view_hview[0] - 18 - 1, hint_bottom);
        draw_text(view_wview[0] div 2 + 1, view_hview[0] - 18 + 1, hint_bottom);
        draw_set_color(c_white);
        draw_text(view_wview[0] div 2, view_hview[0] - 18, hint_bottom);
    }
    
    surface_reset_target();
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    hint_up_to_date = true;
}
draw_surface(hint_surface, view_xview[0], view_yview[0]);
event_user(slot_draw_event);
if(is_touchscreen)
{
    if(selectState == 0)
    {
        draw_sprite(sprTouchscreenReturn, 0, view_xview[0] + view_wview[0] - 28, view_yview[0] + 4);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
