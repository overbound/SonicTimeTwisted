<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprSaveControl</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize objects for the screen and read saved data
// For backwards compatibility, all existing save files are shifted one slot to the right
// if a save exists in slot 0.
shift_savefiles();
/// Create Objects and Variables
slots[0]=instance_create(64,120,objNoSaveSlot);
slots[1]=instance_create(192,120,objSaveSlot);
slots[2]=instance_create(320,120,objSaveSlot);
slots[3]=instance_create(448,120,objSaveSlot);
slots[4]=instance_create(576,120,objSaveSlot);
slots[5]=instance_create(704,120,objSaveSlot);
slots[6]=instance_create(832,120,objSaveSlot);
slots[7]=instance_create(960,120,objSaveSlot);
slots[8]=instance_create(1088,120,objDeleteSlot);
slots[0].slotNumber = 0;
slots[1].slotNumber = 1;
slots[2].slotNumber = 2;
slots[3].slotNumber = 3;
slots[4].slotNumber = 4;
slots[5].slotNumber = 5;
slots[6].slotNumber = 6;
slots[7].slotNumber = 7;
slots[8].slotNumber = 8;
xSpeed=0;
selectCheck = 1;
x=slots[1].x;
y=slots[1].y;
selectState = 0;
// left = 0 right = 1
stageLeftRight = 1;
stageDeleteConfirmSprite = sprDeleteConfirm;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Horizontal Movement
if selectState == 0 {
    if selectCheck &gt; 0 {
        if input_check_pressed(cLEFT) {
            xSpeed=-1;
            selectCheck -=1;
            audio_play_sound(sndBeep,10,false);
        }
    }
    
    if selectCheck &lt; 8 {
        if input_check_pressed(cRIGHT) {
            xSpeed=1;
            selectCheck +=1;
            audio_play_sound(sndBeep,10,false);
        }
    }
}
else if selectState == 1 {
    if input_check_pressed(cLEFT) &amp;&amp; slots[selectCheck].visiblePast==1 {
        stageLeftRight=0;
    }
    if input_check_pressed(cRIGHT) &amp;&amp; slots[selectCheck].visibleFuture==1 {
        stageLeftRight=1;
    }
}
else if selectState == 3 {
    var filename = save_file_name(selectCheck);
    
    if input_check_pressed(cLEFT) {
        slots[selectCheck].visiblePast=0;
        slots[selectCheck].visibleFuture=0;
        eas_file_delete(filename);
        selectState = 0;
        slots[selectCheck].iconIndex = 0;
        slots[selectCheck].characterSelect=1;
        slots[selectCheck].alarm[0] = 1;
        slots[selectCheck].lastFutureLevel = 0;
        slots[selectCheck].lastPastLevel = 0;
        sprite_index = sprSaveControl;
        
    }
    if input_check_pressed(cRIGHT) {
        
        selectState =0;    
    
    }   
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Selector Movement
    
if x &lt;&gt; slots[selectCheck].x {    
    if(xSpeed == 1)
        x += 16;
    if(xSpeed == -1)
        x -= 16;
} else {
    xSpeed=0;
}
    
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Vertical Controls and Actions
if xSpeed == 0 {
    if selectState == 0 {
        if input_check_pressed(cA) || input_check_pressed(cSTART) {
        if selectCheck != 8 {
        
        if sprite_index == sprSaveDelete {
            selectState=3;
        
        } else {
                var filename = save_file_name(selectCheck);
                if !eas_file_exists(filename) {
                    selectState = 2;
                    allowLevelStart = false;
                } else {
    
                    selectState = 1;
                }
            }
            
            } else if sprite_index == sprSaveControl{
            
                //selectState=3;
                sprite_index=sprSaveDelete;
                image_speed=.25;
            
            } else {
            
                sprite_index=sprSaveControl;
                image_speed=0;
            
            }
        }
    }
    if selectState == 1 {
        with slots[selectCheck] {
            if input_check_pressed(cUP) {
                if lastFutureLevel &gt; iconIndex || lastPastLevel &gt; iconIndex
                    iconIndex += 1;
            }
            if input_check_pressed(cDOWN) {
                if iconIndex &gt; 0
                    iconIndex -= 1;
            }
            if input_check_pressed(cB) {
                other.selectState = 0;
                allowLevelStart = false;
            }
            if input_check_released(cA) || input_check_pressed(cSTART) {
                allowLevelStart = true;
            }
            if (input_check_pressed(cA) || input_check_pressed(cSTART)) &amp;&amp; allowLevelStart == true {
                if input_check_pressed(cLEFT) &amp;&amp; slots[selectCheck].visiblePast==1 {
                        stageLeftRight=0;
                    }
                    if input_check_pressed(cRIGHT) &amp;&amp; slots[selectCheck].visibleFuture==1 {
                        stageLeftRight=1;
                    }
                if (other.stageLeftRight == 1 &amp;&amp; visibleFuture == 1) or (other.stageLeftRight == 0 &amp;&amp; visiblePast == 1) {
                    if other.stageLeftRight == 0
                    objProgram.in_past = true;
                    else objProgram.in_past = false;
    
                    objGameData.character_id[0] = characterSelect;
                    objProgram.saveSlot=other.selectCheck;
                    load_emeralds();
                    load_lives();
                    if iconIndex &gt; 0 {
                        level_goto_from_save(iconIndex + 1)
                    }
                    else {
                        level_goto_from_save(iconIndex)
                    }
                }
            }
            if iconIndex &lt; 0 {
                iconIndex = lastIndex;
            } else if iconIndex &gt; lastIndex {
                iconIndex = 0;
            }
            if input_check_pressed(cUP) || input_check_pressed(cDOWN) {
                if pastLevels[iconIndex] == true {
                    visiblePast = 1;
                }
                else
                    visiblePast = 0;
                if futureLevels[iconIndex] == true {
                    visibleFuture = 1;
                }
                else if futureLevels[iconIndex] == false visibleFuture = 0;
            }
        }
    }
    if selectState == 2 {
        with slots[selectCheck] {
            if input_check_pressed(cUP) {
                characterSelect += 1;
            }
            if input_check_pressed(cDOWN) {
                characterSelect -= 1;
            }
            if characterSelect &gt; 3 {
                characterSelect = 1;
            } else if characterSelect &lt; 1 {
                characterSelect = 3;
            }
            if input_check_released(cA) || input_check_pressed(cSTART) {
                allowLevelStart = true;
            }
            if input_check_pressed(cB) {
                other.selectState = 0;
            }
        }
        
        if (input_check_pressed(cA) || input_check_pressed(cSTART)) &amp;&amp; slots[selectCheck].allowLevelStart == true {
            create_new_save(slots[selectCheck].characterSelect, other.selectCheck);
            slots[selectCheck].futureLevels[0]=true;
            slots[selectCheck].allowLevelStart =false;
            slots[selectCheck].visibleFuture=1;
            if(selectCheck &gt; 0)
            {
                selectState = 1;
            }
            else
            {
                // if it's a no save slot, the game immediately starts
                objProgram.saveSlot=other.selectCheck;
                objProgram.in_past = false;
                objGameData.character_id[0] = slots[selectCheck].characterSelect;
                load_emeralds();
                load_lives();
                level_goto_from_save(0);
            }
        }
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// visibility flash
if selectState!=3 &amp;&amp; objScreen.frame_counter {
    visible = !visible;
} else visible=true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>stop_all_music(false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if selectState==0 {
    draw_sprite_ext(sprite_index,0,x,y,image_xscale,image_yscale,0,c_white,1);
}
else if selectState==1{
if slots[selectCheck].iconIndex &gt; 11
    draw_sprite_ext(sprSelectStage,2,x,y-44,image_xscale,image_yscale,0,c_white,1);
    else draw_sprite_ext(sprSelectStage,stageLeftRight,x,y-44,image_xscale,image_yscale,0,c_white,1);
}
if selectState ==2 {
    if(selectCheck == 0)
    {
        draw_sprite_ext(sprCharSelect,0,x,y+24,1,1,0,c_white,1);
    }
    else
    {
        draw_sprite_ext(sprCharSelect,0,x,y+32,1,1,0,c_white,1);
    }
}
if selectState==3 {
    draw_sprite_ext(stageDeleteConfirmSprite,0,x,y,image_xscale,image_yscale,0,c_white,1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
